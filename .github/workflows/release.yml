name: Release
on:
  push:
    branches:
      - main
  pull_request:
    paths:
      # Go
      - "**"
      - "!**.md"
      - ".goreleaser"
      - "go.*"
      - "**.go"
      # CI
      - ".github/workflows/release.yml"

jobs:
  semantic-release:
    name: Semantic release
    runs-on: ubuntu-latest
    outputs:
      new-release-published: ${{ steps.semantic-echo.outputs.new-release-published }}
      release-version: ${{ steps.semantic-echo.outputs.release-version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Unshallow
        run: git fetch --prune --unshallow

      - name: Run Semantic Release
        id: semantic
        uses: docker://ghcr.io/codfish/semantic-release-action:v1
        with:
          branches: |
            ['main']
          plugins: |
            [
              '@semantic-release/commit-analyzer',
              '@semantic-release/release-notes-generator',
              '@semantic-release/github'
            ]
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Export Semantic Release
        id: semantic-echo
        run: |
          echo "::set-output name=new-release-published::${{steps.semantic.outputs.new-release-published}}"
          echo "::set-output name=release-version::${{steps.semantic.outputs.release-version}}"

  post-semantic-release:
    needs: semantic-release
    #if: needs.semantic-release.outputs.new-release-published == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Unshallow
        run: git fetch --prune --unshallow

      - name: Setup asdf
        uses: asdf-vm/actions/setup@9cd779f40fe38688dd19505ccbc4eaaf018b44e7
        with:
          asdf_version: 0.16.7

      - name: Setup go
        run: |
          asdf plugin add golang
          asdf install golang

      - name: Register version on pkg.go.dev
        if: needs.semantic-release.outputs.new-release-published == 'true'
        run: |
          package=$(cat go.mod | grep ^module | awk '{print $2}')
          version=v${{ needs.semantic-release.outputs.release-version }}
          url=https://proxy.golang.org/${package}/@v/${version}.info
          set -x +e
          curl -i $url
