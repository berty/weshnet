{
  "swagger": "2.0",
  "info": {
    "title": "protocoltypes.proto",
    "version": "version not set"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {},
  "definitions": {
    "GroupDeviceStatusType": {
      "type": "string",
      "enum": [
        "TypeUnknown",
        "TypePeerDisconnected",
        "TypePeerConnected",
        "TypePeerReconnecting"
      ],
      "default": "TypeUnknown"
    },
    "OrbitDBReplicationStatus": {
      "type": "object",
      "properties": {
        "progress": {
          "type": "string",
          "format": "int64"
        },
        "maximum": {
          "type": "string",
          "format": "int64"
        },
        "buffered": {
          "type": "string",
          "format": "int64"
        },
        "queued": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "PeerListFeature": {
      "type": "string",
      "enum": [
        "UnknownFeature",
        "WeshFeature",
        "BLEFeature",
        "LocalFeature",
        "TorFeature",
        "QuicFeature"
      ],
      "default": "UnknownFeature"
    },
    "PeerListRoute": {
      "type": "object",
      "properties": {
        "is_active": {
          "type": "boolean",
          "description": "IsActive indicates whether the address is currently used or just known."
        },
        "address": {
          "type": "string",
          "description": "Address is the multiaddress via which we are connected with the peer."
        },
        "direction": {
          "$ref": "#/definitions/v1Direction",
          "description": "Direction is which way the connection was established."
        },
        "latency": {
          "type": "string",
          "format": "int64",
          "description": "Latency is the last known round trip time to the peer in ms."
        },
        "streams": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PeerListStream"
          },
          "description": "Streams returns list of streams established with the peer."
        }
      }
    },
    "PeerListStream": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "id is an identifier used to write protocol headers in streams."
        }
      }
    },
    "ServiceGetConfigurationSettingState": {
      "type": "string",
      "enum": [
        "Unknown",
        "Enabled",
        "Disabled",
        "Unavailable"
      ],
      "default": "Unknown"
    },
    "SystemInfoOrbitDB": {
      "type": "object",
      "properties": {
        "account_metadata": {
          "$ref": "#/definitions/OrbitDBReplicationStatus"
        }
      }
    },
    "SystemInfoP2P": {
      "type": "object",
      "properties": {
        "connected_peers": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "SystemInfoProcess": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "vcs_ref": {
          "type": "string"
        },
        "uptime_ms": {
          "type": "string",
          "format": "int64"
        },
        "user_cpu_time_ms": {
          "type": "string",
          "format": "int64"
        },
        "system_cpu_time_ms": {
          "type": "string",
          "format": "int64"
        },
        "started_at": {
          "type": "string",
          "format": "int64"
        },
        "rlimit_cur": {
          "type": "string",
          "format": "uint64"
        },
        "num_goroutine": {
          "type": "string",
          "format": "int64"
        },
        "nofile": {
          "type": "string",
          "format": "int64"
        },
        "too_many_open_files": {
          "type": "boolean"
        },
        "num_cpu": {
          "type": "string",
          "format": "int64"
        },
        "go_version": {
          "type": "string"
        },
        "operating_system": {
          "type": "string"
        },
        "host_name": {
          "type": "string"
        },
        "arch": {
          "type": "string"
        },
        "rlimit_max": {
          "type": "string",
          "format": "uint64"
        },
        "pid": {
          "type": "string",
          "format": "int64"
        },
        "ppid": {
          "type": "string",
          "format": "int64"
        },
        "priority": {
          "type": "string",
          "format": "int64"
        },
        "uid": {
          "type": "string",
          "format": "int64"
        },
        "working_dir": {
          "type": "string"
        },
        "system_username": {
          "type": "string"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "runtimeError": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "runtimeStreamError": {
      "type": "object",
      "properties": {
        "grpc_code": {
          "type": "integer",
          "format": "int32"
        },
        "http_code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "http_status": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1AccountVerifiedCredentialRegistered": {
      "type": "object",
      "properties": {
        "device_pk": {
          "type": "string",
          "format": "byte",
          "title": "device_pk is the public key of the device sending the message"
        },
        "signed_identity_public_key": {
          "type": "string",
          "format": "byte"
        },
        "verified_credential": {
          "type": "string"
        },
        "registration_date": {
          "type": "string",
          "format": "int64"
        },
        "expiration_date": {
          "type": "string",
          "format": "int64"
        },
        "identifier": {
          "type": "string"
        },
        "issuer": {
          "type": "string"
        }
      }
    },
    "v1ActivateGroupReply": {
      "type": "object"
    },
    "v1AppMessageSendReply": {
      "type": "object",
      "properties": {
        "cid": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "v1AppMetadataSendReply": {
      "type": "object",
      "properties": {
        "cid": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "v1ContactAliasKeySendReply": {
      "type": "object"
    },
    "v1ContactBlockReply": {
      "type": "object"
    },
    "v1ContactRequestAcceptReply": {
      "type": "object"
    },
    "v1ContactRequestDisableReply": {
      "type": "object"
    },
    "v1ContactRequestDiscardReply": {
      "type": "object"
    },
    "v1ContactRequestEnableReply": {
      "type": "object",
      "properties": {
        "public_rendezvous_seed": {
          "type": "string",
          "format": "byte",
          "title": "public_rendezvous_seed is the rendezvous seed used by the current account"
        }
      }
    },
    "v1ContactRequestReferenceReply": {
      "type": "object",
      "properties": {
        "public_rendezvous_seed": {
          "type": "string",
          "format": "byte",
          "title": "public_rendezvous_seed is the rendezvous seed used by the current account"
        },
        "enabled": {
          "type": "boolean",
          "title": "enabled indicates if incoming contact requests are enabled"
        }
      }
    },
    "v1ContactRequestResetReferenceReply": {
      "type": "object",
      "properties": {
        "public_rendezvous_seed": {
          "type": "string",
          "format": "byte",
          "title": "public_rendezvous_seed is the rendezvous seed used by the current account"
        }
      }
    },
    "v1ContactRequestSendReply": {
      "type": "object"
    },
    "v1ContactUnblockReply": {
      "type": "object"
    },
    "v1CredentialVerificationServiceCompleteFlowReply": {
      "type": "object",
      "properties": {
        "identifier": {
          "type": "string"
        }
      }
    },
    "v1CredentialVerificationServiceInitFlowReply": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        },
        "secure_url": {
          "type": "boolean"
        }
      }
    },
    "v1DeactivateGroupReply": {
      "type": "object"
    },
    "v1DebugGroupReply": {
      "type": "object",
      "properties": {
        "peer_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "peer_ids is the list of peer ids connected to the same group"
        }
      }
    },
    "v1DebugInspectGroupLogType": {
      "type": "string",
      "enum": [
        "DebugInspectGroupLogTypeUndefined",
        "DebugInspectGroupLogTypeMessage",
        "DebugInspectGroupLogTypeMetadata"
      ],
      "default": "DebugInspectGroupLogTypeUndefined"
    },
    "v1DebugInspectGroupStoreReply": {
      "type": "object",
      "properties": {
        "cid": {
          "type": "string",
          "format": "byte",
          "title": "cid is the CID of the IPFS log entry"
        },
        "parent_cids": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          },
          "title": "parent_cids is the list of the parent entries"
        },
        "metadata_event_type": {
          "$ref": "#/definitions/v1EventType",
          "title": "event_type metadata event type if subscribed to metadata events"
        },
        "device_pk": {
          "type": "string",
          "format": "byte",
          "title": "device_pk is the public key of the device signing the entry"
        },
        "payload": {
          "type": "string",
          "format": "byte",
          "title": "payload is the un encrypted entry payload if available"
        }
      }
    },
    "v1DebugListGroupsReply": {
      "type": "object",
      "properties": {
        "group_pk": {
          "type": "string",
          "format": "byte",
          "title": "group_pk is the public key of the group"
        },
        "group_type": {
          "$ref": "#/definitions/v1GroupType",
          "title": "group_type is the type of the group"
        },
        "contact_pk": {
          "type": "string",
          "format": "byte",
          "title": "contact_pk is the contact public key if appropriate"
        }
      }
    },
    "v1DecodeContactReply": {
      "type": "object",
      "properties": {
        "contact": {
          "$ref": "#/definitions/v1ShareableContact",
          "description": "shareable_contact is the decoded shareable contact."
        }
      }
    },
    "v1Direction": {
      "type": "string",
      "enum": [
        "UnknownDir",
        "InboundDir",
        "OutboundDir",
        "BiDir"
      ],
      "default": "UnknownDir"
    },
    "v1EventContext": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "byte",
          "title": "id is the CID of the underlying OrbitDB event"
        },
        "parent_ids": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          },
          "title": "id are the the CIDs of the underlying parents of the OrbitDB event"
        },
        "group_pk": {
          "type": "string",
          "format": "byte",
          "title": "group_pk receiving the event"
        }
      },
      "title": "EventContext adds context (its id, its parents and its attachments) to an event"
    },
    "v1EventType": {
      "type": "string",
      "enum": [
        "EventTypeUndefined",
        "EventTypeGroupMemberDeviceAdded",
        "EventTypeGroupDeviceChainKeyAdded",
        "EventTypeAccountGroupJoined",
        "EventTypeAccountGroupLeft",
        "EventTypeAccountContactRequestDisabled",
        "EventTypeAccountContactRequestEnabled",
        "EventTypeAccountContactRequestReferenceReset",
        "EventTypeAccountContactRequestOutgoingEnqueued",
        "EventTypeAccountContactRequestOutgoingSent",
        "EventTypeAccountContactRequestIncomingReceived",
        "EventTypeAccountContactRequestIncomingDiscarded",
        "EventTypeAccountContactRequestIncomingAccepted",
        "EventTypeAccountContactBlocked",
        "EventTypeAccountContactUnblocked",
        "EventTypeContactAliasKeyAdded",
        "EventTypeMultiMemberGroupAliasResolverAdded",
        "EventTypeMultiMemberGroupInitialMemberAnnounced",
        "EventTypeMultiMemberGroupAdminRoleGranted",
        "EventTypeGroupReplicating",
        "EventTypeAccountVerifiedCredentialRegistered",
        "EventTypeGroupMetadataPayloadSent"
      ],
      "default": "EventTypeUndefined",
      "title": "- EventTypeUndefined: EventTypeUndefined indicates that the value has not been set. Should not happen.\n - EventTypeGroupMemberDeviceAdded: EventTypeGroupMemberDeviceAdded indicates the payload includes that a member has added their device to the group\n - EventTypeGroupDeviceChainKeyAdded: EventTypeGroupDeviceChainKeyAdded indicates the payload includes that a member has sent their device chain key to another member\n - EventTypeAccountGroupJoined: EventTypeAccountGroupJoined indicates the payload includes that the account has joined a group\n - EventTypeAccountGroupLeft: EventTypeAccountGroupLeft indicates the payload includes that the account has left a group\n - EventTypeAccountContactRequestDisabled: EventTypeAccountContactRequestDisabled indicates the payload includes that the account has disabled incoming contact requests\n - EventTypeAccountContactRequestEnabled: EventTypeAccountContactRequestEnabled indicates the payload includes that the account has enabled incoming contact requests\n - EventTypeAccountContactRequestReferenceReset: EventTypeAccountContactRequestReferenceReset indicates the payload includes that the account has a new contact request rendezvous seed\n - EventTypeAccountContactRequestOutgoingEnqueued: EventTypeAccountContactRequestOutgoingEnqueued indicates the payload includes that the account will attempt to send a new contact request\n - EventTypeAccountContactRequestOutgoingSent: EventTypeAccountContactRequestOutgoingSent indicates the payload includes that the account has sent a contact request\n - EventTypeAccountContactRequestIncomingReceived: EventTypeAccountContactRequestIncomingReceived indicates the payload includes that the account has received a contact request\n - EventTypeAccountContactRequestIncomingDiscarded: EventTypeAccountContactRequestIncomingDiscarded indicates the payload includes that the account has ignored a contact request\n - EventTypeAccountContactRequestIncomingAccepted: EventTypeAccountContactRequestIncomingAccepted indicates the payload includes that the account has accepted a contact request\n - EventTypeAccountContactBlocked: EventTypeAccountContactBlocked indicates the payload includes that the account has blocked a contact\n - EventTypeAccountContactUnblocked: EventTypeAccountContactUnblocked indicates the payload includes that the account has unblocked a contact\n - EventTypeContactAliasKeyAdded: EventTypeContactAliasKeyAdded indicates the payload includes that the contact group has received an alias key\n - EventTypeMultiMemberGroupAliasResolverAdded: EventTypeMultiMemberGroupAliasResolverAdded indicates the payload includes that a member of the group sent their alias proof\n - EventTypeMultiMemberGroupInitialMemberAnnounced: EventTypeMultiMemberGroupInitialMemberAnnounced indicates the payload includes that a member has authenticated themselves as the group owner\n - EventTypeMultiMemberGroupAdminRoleGranted: EventTypeMultiMemberGroupAdminRoleGranted indicates the payload includes that an admin of the group granted another member as an admin\n - EventTypeGroupReplicating: EventTypeGroupReplicating indicates that the group has been registered for replication on a server\n - EventTypeAccountVerifiedCredentialRegistered: EventTypeAccountVerifiedCredentialRegistered\n - EventTypeGroupMetadataPayloadSent: EventTypeGroupMetadataPayloadSent indicates the payload includes an app specific event, unlike messages stored on the message store it is encrypted using a static key"
    },
    "v1Group": {
      "type": "object",
      "properties": {
        "public_key": {
          "type": "string",
          "format": "byte",
          "title": "public_key is the identifier of the group, it signs the group secret and the initial member of a multi-member group"
        },
        "secret": {
          "type": "string",
          "format": "byte",
          "title": "secret is the symmetric secret of the group, which is used to encrypt the metadata"
        },
        "secret_sig": {
          "type": "string",
          "format": "byte",
          "title": "secret_sig is the signature of the secret used to ensure the validity of the group"
        },
        "group_type": {
          "$ref": "#/definitions/v1GroupType",
          "title": "group_type specifies the type of the group, used to determine how device chain key is generated"
        },
        "sign_pub": {
          "type": "string",
          "format": "byte",
          "title": "sign_pub is the signature public key used to verify entries, not required when secret and secret_sig are provided"
        },
        "link_key": {
          "type": "string",
          "format": "byte",
          "title": "link_key is the secret key used to exchange group updates and links to attachments, useful for replication services"
        },
        "link_key_sig": {
          "type": "string",
          "format": "byte",
          "title": "link_key_sig is the signature of the link_key using the group private key"
        }
      },
      "title": "Group define a group and is enough to invite someone to it"
    },
    "v1GroupDeviceStatusReply": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/GroupDeviceStatusType"
        },
        "event": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "v1GroupInfoReply": {
      "type": "object",
      "properties": {
        "group": {
          "$ref": "#/definitions/v1Group",
          "title": "group is the group invitation, containing the group pk and its type"
        },
        "member_pk": {
          "type": "string",
          "format": "byte",
          "title": "member_pk is the identifier of the current member in the group"
        },
        "device_pk": {
          "type": "string",
          "format": "byte",
          "title": "device_pk is the identifier of the current device in the group"
        }
      }
    },
    "v1GroupMessageEvent": {
      "type": "object",
      "properties": {
        "event_context": {
          "$ref": "#/definitions/v1EventContext",
          "title": "event_context contains context information about the event"
        },
        "headers": {
          "$ref": "#/definitions/v1MessageHeaders",
          "title": "headers contains headers of the secure message"
        },
        "message": {
          "type": "string",
          "format": "byte",
          "title": "message contains the secure message payload"
        }
      }
    },
    "v1GroupMetadata": {
      "type": "object",
      "properties": {
        "event_type": {
          "$ref": "#/definitions/v1EventType",
          "title": "event_type defines which event type is used"
        },
        "payload": {
          "type": "string",
          "format": "byte",
          "title": "the serialization depends on event_type, event is symmetrically encrypted"
        },
        "sig": {
          "type": "string",
          "format": "byte",
          "title": "sig is the signature of the payload, it depends on the event_type for the used key"
        },
        "protocol_metadata": {
          "$ref": "#/definitions/v1ProtocolMetadata",
          "title": "protocol_metadata is protocol layer data"
        }
      },
      "title": "GroupMetadata is used in GroupEnvelope and only readable by invited group members"
    },
    "v1GroupMetadataEvent": {
      "type": "object",
      "properties": {
        "event_context": {
          "$ref": "#/definitions/v1EventContext",
          "title": "event_context contains context information about the event"
        },
        "metadata": {
          "$ref": "#/definitions/v1GroupMetadata",
          "title": "metadata contains the newly available metadata"
        },
        "event": {
          "type": "string",
          "format": "byte",
          "title": "event_clear clear bytes for the event"
        }
      }
    },
    "v1GroupType": {
      "type": "string",
      "enum": [
        "GroupTypeUndefined",
        "GroupTypeAccount",
        "GroupTypeContact",
        "GroupTypeMultiMember"
      ],
      "default": "GroupTypeUndefined",
      "description": " - GroupTypeUndefined: GroupTypeUndefined indicates that the value has not been set. For example, happens if group is replicated.\n - GroupTypeAccount: GroupTypeAccount is the group managing an account, available to all its devices.\n - GroupTypeContact: GroupTypeContact is the group created between two accounts, available to all their devices.\n - GroupTypeMultiMember: GroupTypeMultiMember is a group containing an undefined number of members."
    },
    "v1MessageHeaders": {
      "type": "object",
      "properties": {
        "counter": {
          "type": "string",
          "format": "uint64",
          "title": "counter is the current counter value for the specified device"
        },
        "device_pk": {
          "type": "string",
          "format": "byte",
          "title": "device_pk is the public key of the device sending the message"
        },
        "sig": {
          "type": "string",
          "format": "byte",
          "title": "sig is the signature of the encrypted message using the device's private key"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "metadata allow to pass custom informations"
        }
      },
      "title": "MessageHeaders is used in MessageEnvelope and only readable by invited group members"
    },
    "v1MultiMemberGroupAdminRoleGrantReply": {
      "type": "object"
    },
    "v1MultiMemberGroupAliasResolverDiscloseReply": {
      "type": "object"
    },
    "v1MultiMemberGroupCreateReply": {
      "type": "object",
      "properties": {
        "group_pk": {
          "type": "string",
          "format": "byte",
          "title": "group_pk is the identifier of the newly created group"
        }
      }
    },
    "v1MultiMemberGroupInvitationCreateReply": {
      "type": "object",
      "properties": {
        "group": {
          "$ref": "#/definitions/v1Group",
          "title": "group is the invitation to the group"
        }
      }
    },
    "v1MultiMemberGroupJoinReply": {
      "type": "object"
    },
    "v1MultiMemberGroupLeaveReply": {
      "type": "object"
    },
    "v1OutOfStoreMessage": {
      "type": "object",
      "properties": {
        "cid": {
          "type": "string",
          "format": "byte"
        },
        "device_pk": {
          "type": "string",
          "format": "byte"
        },
        "counter": {
          "type": "string",
          "format": "uint64"
        },
        "sig": {
          "type": "string",
          "format": "byte"
        },
        "flags": {
          "type": "integer",
          "format": "int64"
        },
        "encrypted_payload": {
          "type": "string",
          "format": "byte"
        },
        "nonce": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "v1OutOfStoreReceiveReply": {
      "type": "object",
      "properties": {
        "message": {
          "$ref": "#/definitions/v1OutOfStoreMessage"
        },
        "cleartext": {
          "type": "string",
          "format": "byte"
        },
        "group_public_key": {
          "type": "string",
          "format": "byte"
        },
        "already_received": {
          "type": "boolean"
        }
      }
    },
    "v1OutOfStoreSealReply": {
      "type": "object",
      "properties": {
        "encrypted": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "v1PeerListPeer": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "id is the libp2p.PeerID."
        },
        "routes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PeerListRoute"
          },
          "description": "routes are the list of active and known maddr."
        },
        "errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "errors is a list of errors related to the peer."
        },
        "features": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PeerListFeature"
          },
          "description": "Features is a list of available features."
        },
        "min_latency": {
          "type": "string",
          "format": "int64",
          "description": "MinLatency is the minimum latency across all the peer routes."
        },
        "is_active": {
          "type": "boolean",
          "description": "IsActive is true if at least one of the route is active."
        },
        "direction": {
          "$ref": "#/definitions/v1Direction",
          "description": "Direction is the aggregate of all the routes's direction."
        }
      }
    },
    "v1PeerListReply": {
      "type": "object",
      "properties": {
        "peers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PeerListPeer"
          }
        }
      }
    },
    "v1ProtocolMetadata": {
      "type": "object"
    },
    "v1RefreshContactRequestPeer": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "id is the libp2p.PeerID."
        },
        "addrs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "list of peers multiaddrs."
        }
      }
    },
    "v1RefreshContactRequestReply": {
      "type": "object",
      "properties": {
        "peers_found": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1RefreshContactRequestPeer"
          },
          "description": "peers found and successfully connected."
        }
      }
    },
    "v1ReplicationServiceRegisterGroupReply": {
      "type": "object"
    },
    "v1ServiceExportDataReply": {
      "type": "object",
      "properties": {
        "exported_data": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "v1ServiceGetConfigurationReply": {
      "type": "object",
      "properties": {
        "account_pk": {
          "type": "string",
          "format": "byte",
          "title": "account_pk is the public key of the current account"
        },
        "device_pk": {
          "type": "string",
          "format": "byte",
          "title": "device_pk is the public key of the current device"
        },
        "account_group_pk": {
          "type": "string",
          "format": "byte",
          "title": "account_group_pk is the public key of the account group"
        },
        "peer_id": {
          "type": "string",
          "title": "peer_id is the peer ID of the current IPFS node"
        },
        "listeners": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "listeners is the list of swarm listening addresses of the current IPFS node"
        },
        "ble_enabled": {
          "$ref": "#/definitions/ServiceGetConfigurationSettingState"
        },
        "wifi_p2p_enabled": {
          "$ref": "#/definitions/ServiceGetConfigurationSettingState"
        },
        "mdns_enabled": {
          "$ref": "#/definitions/ServiceGetConfigurationSettingState"
        },
        "relay_enabled": {
          "$ref": "#/definitions/ServiceGetConfigurationSettingState"
        }
      }
    },
    "v1ShareContactReply": {
      "type": "object",
      "properties": {
        "encoded_contact": {
          "type": "string",
          "format": "byte",
          "description": "encoded_contact is the Protobuf encoding of the ShareableContact. You can further encode the bytes for sharing, such as base58 or QR code."
        }
      }
    },
    "v1ShareableContact": {
      "type": "object",
      "properties": {
        "pk": {
          "type": "string",
          "format": "byte",
          "title": "pk is the account to send a contact request to"
        },
        "public_rendezvous_seed": {
          "type": "string",
          "format": "byte",
          "title": "public_rendezvous_seed is the rendezvous seed used by the account to send a contact request to"
        },
        "metadata": {
          "type": "string",
          "format": "byte",
          "title": "metadata is the metadata specific to the app to identify the contact for the request"
        }
      }
    },
    "v1SystemInfoReply": {
      "type": "object",
      "properties": {
        "process": {
          "$ref": "#/definitions/SystemInfoProcess"
        },
        "p2p": {
          "$ref": "#/definitions/SystemInfoP2P"
        },
        "orbitdb": {
          "$ref": "#/definitions/SystemInfoOrbitDB"
        },
        "warns": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1VerifiedCredentialsListReply": {
      "type": "object",
      "properties": {
        "credential": {
          "$ref": "#/definitions/v1AccountVerifiedCredentialRegistered"
        }
      }
    }
  }
}
