// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: protocoltypes.proto

package protocoltypes

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProtocolServiceClient is the client API for ProtocolService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProtocolServiceClient interface {
	// InstanceExportData exports instance data
	InstanceExportData(ctx context.Context, in *InstanceExportData_Request, opts ...grpc.CallOption) (ProtocolService_InstanceExportDataClient, error)
	// InstanceGetConfiguration gets current configuration of this protocol instance
	InstanceGetConfiguration(ctx context.Context, in *InstanceGetConfiguration_Request, opts ...grpc.CallOption) (*InstanceGetConfiguration_Reply, error)
	// ContactRequestReference retrieves the information required to create a reference (ie. included in a shareable link) to the current account
	ContactRequestReference(ctx context.Context, in *ContactRequestReference_Request, opts ...grpc.CallOption) (*ContactRequestReference_Reply, error)
	// ContactRequestDisable disables incoming contact requests
	ContactRequestDisable(ctx context.Context, in *ContactRequestDisable_Request, opts ...grpc.CallOption) (*ContactRequestDisable_Reply, error)
	// ContactRequestEnable enables incoming contact requests
	ContactRequestEnable(ctx context.Context, in *ContactRequestEnable_Request, opts ...grpc.CallOption) (*ContactRequestEnable_Reply, error)
	// ContactRequestResetReference changes the contact request reference
	ContactRequestResetReference(ctx context.Context, in *ContactRequestResetReference_Request, opts ...grpc.CallOption) (*ContactRequestResetReference_Reply, error)
	// ContactRequestSend attempt to send a contact request
	ContactRequestSend(ctx context.Context, in *ContactRequestSend_Request, opts ...grpc.CallOption) (*ContactRequestSend_Reply, error)
	// ContactRequestAccept accepts a contact request
	ContactRequestAccept(ctx context.Context, in *ContactRequestAccept_Request, opts ...grpc.CallOption) (*ContactRequestAccept_Reply, error)
	// ContactRequestDiscard ignores a contact request, without informing the other user
	ContactRequestDiscard(ctx context.Context, in *ContactRequestDiscard_Request, opts ...grpc.CallOption) (*ContactRequestDiscard_Reply, error)
	// ContactBlock blocks a contact from sending requests
	ContactBlock(ctx context.Context, in *ContactBlock_Request, opts ...grpc.CallOption) (*ContactBlock_Reply, error)
	// ContactUnblock unblocks a contact from sending requests
	ContactUnblock(ctx context.Context, in *ContactUnblock_Request, opts ...grpc.CallOption) (*ContactUnblock_Reply, error)
	// ContactAliasKeySend send an alias key to a contact, the contact will be able to assert that your account is being present on a multi-member group
	ContactAliasKeySend(ctx context.Context, in *ContactAliasKeySend_Request, opts ...grpc.CallOption) (*ContactAliasKeySend_Reply, error)
	// MultiMemberGroupCreate creates a new multi-member group
	MultiMemberGroupCreate(ctx context.Context, in *MultiMemberGroupCreate_Request, opts ...grpc.CallOption) (*MultiMemberGroupCreate_Reply, error)
	// MultiMemberGroupJoin joins a multi-member group
	MultiMemberGroupJoin(ctx context.Context, in *MultiMemberGroupJoin_Request, opts ...grpc.CallOption) (*MultiMemberGroupJoin_Reply, error)
	// MultiMemberGroupLeave leaves a multi-member group
	MultiMemberGroupLeave(ctx context.Context, in *MultiMemberGroupLeave_Request, opts ...grpc.CallOption) (*MultiMemberGroupLeave_Reply, error)
	// MultiMemberGroupAliasResolverDisclose discloses your alias resolver key
	MultiMemberGroupAliasResolverDisclose(ctx context.Context, in *MultiMemberGroupAliasResolverDisclose_Request, opts ...grpc.CallOption) (*MultiMemberGroupAliasResolverDisclose_Reply, error)
	// MultiMemberGroupAdminRoleGrant grants an admin role to a group member
	MultiMemberGroupAdminRoleGrant(ctx context.Context, in *MultiMemberGroupAdminRoleGrant_Request, opts ...grpc.CallOption) (*MultiMemberGroupAdminRoleGrant_Reply, error)
	// MultiMemberGroupInvitationCreate creates an invitation to a multi-member group
	MultiMemberGroupInvitationCreate(ctx context.Context, in *MultiMemberGroupInvitationCreate_Request, opts ...grpc.CallOption) (*MultiMemberGroupInvitationCreate_Reply, error)
	// AppMetadataSend adds an app event to the metadata store, the message is encrypted using a symmetric key and readable by future group members
	AppMetadataSend(ctx context.Context, in *AppMetadataSend_Request, opts ...grpc.CallOption) (*AppMetadataSend_Reply, error)
	// AppMessageSend adds an app event to the message store, the message is encrypted using a derived key and readable by current group members
	AppMessageSend(ctx context.Context, in *AppMessageSend_Request, opts ...grpc.CallOption) (*AppMessageSend_Reply, error)
	// GroupMetadataList replays previous and subscribes to new metadata events from the group
	GroupMetadataList(ctx context.Context, in *GroupMetadataList_Request, opts ...grpc.CallOption) (ProtocolService_GroupMetadataListClient, error)
	// GroupMessageList replays previous and subscribes to new message events from the group
	GroupMessageList(ctx context.Context, in *GroupMessageList_Request, opts ...grpc.CallOption) (ProtocolService_GroupMessageListClient, error)
	// GroupInfo retrieves information about a group
	GroupInfo(ctx context.Context, in *GroupInfo_Request, opts ...grpc.CallOption) (*GroupInfo_Reply, error)
	// ActivateGroup explicitly opens a group
	ActivateGroup(ctx context.Context, in *ActivateGroup_Request, opts ...grpc.CallOption) (*ActivateGroup_Reply, error)
	// DeactivateGroup closes a group
	DeactivateGroup(ctx context.Context, in *DeactivateGroup_Request, opts ...grpc.CallOption) (*DeactivateGroup_Reply, error)
	// GroupDeviceStatus monitor device status
	GroupDeviceStatus(ctx context.Context, in *GroupDeviceStatus_Request, opts ...grpc.CallOption) (ProtocolService_GroupDeviceStatusClient, error)
	DebugListGroups(ctx context.Context, in *DebugListGroups_Request, opts ...grpc.CallOption) (ProtocolService_DebugListGroupsClient, error)
	DebugInspectGroupStore(ctx context.Context, in *DebugInspectGroupStore_Request, opts ...grpc.CallOption) (ProtocolService_DebugInspectGroupStoreClient, error)
	DebugGroup(ctx context.Context, in *DebugGroup_Request, opts ...grpc.CallOption) (*DebugGroup_Reply, error)
	DebugAuthServiceSetToken(ctx context.Context, in *DebugAuthServiceSetToken_Request, opts ...grpc.CallOption) (*DebugAuthServiceSetToken_Reply, error)
	SystemInfo(ctx context.Context, in *SystemInfo_Request, opts ...grpc.CallOption) (*SystemInfo_Reply, error)
	// AuthServiceInitFlow Initialize an authentication flow
	AuthServiceInitFlow(ctx context.Context, in *AuthServiceInitFlow_Request, opts ...grpc.CallOption) (*AuthServiceInitFlow_Reply, error)
	// AuthServiceCompleteFlow Completes an authentication flow
	AuthServiceCompleteFlow(ctx context.Context, in *AuthServiceCompleteFlow_Request, opts ...grpc.CallOption) (*AuthServiceCompleteFlow_Reply, error)
	// CredentialVerificationServiceInitFlow Initialize a credential verification flow
	CredentialVerificationServiceInitFlow(ctx context.Context, in *CredentialVerificationServiceInitFlow_Request, opts ...grpc.CallOption) (*CredentialVerificationServiceInitFlow_Reply, error)
	// CredentialVerificationServiceCompleteFlow Completes a credential verification flow
	CredentialVerificationServiceCompleteFlow(ctx context.Context, in *CredentialVerificationServiceCompleteFlow_Request, opts ...grpc.CallOption) (*CredentialVerificationServiceCompleteFlow_Reply, error)
	// VerifiedCredentialsList Retrieves the list of verified credentials
	VerifiedCredentialsList(ctx context.Context, in *VerifiedCredentialsList_Request, opts ...grpc.CallOption) (*VerifiedCredentialsList_Reply, error)
	// ServicesTokenList Retrieves the list of services tokens
	ServicesTokenList(ctx context.Context, in *ServicesTokenList_Request, opts ...grpc.CallOption) (ProtocolService_ServicesTokenListClient, error)
	// ReplicationServiceRegisterGroup Asks a replication service to distribute a group contents
	ReplicationServiceRegisterGroup(ctx context.Context, in *ReplicationServiceRegisterGroup_Request, opts ...grpc.CallOption) (*ReplicationServiceRegisterGroup_Reply, error)
	// PeerList returns a list of P2P peers
	PeerList(ctx context.Context, in *PeerList_Request, opts ...grpc.CallOption) (*PeerList_Reply, error)
	// PushReceive handles a push payload, decrypts it if possible
	PushReceive(ctx context.Context, in *PushReceive_Request, opts ...grpc.CallOption) (*PushReceive_Reply, error)
	// PushSend sends a push payload to a specified list of group members
	PushSend(ctx context.Context, in *PushSend_Request, opts ...grpc.CallOption) (*PushSend_Reply, error)
	// PushShareToken sends push tokens of own devices to a group
	PushShareToken(ctx context.Context, in *PushShareToken_Request, opts ...grpc.CallOption) (*PushShareToken_Reply, error)
	// PushSetDeviceToken registers a push token for the current device
	PushSetDeviceToken(ctx context.Context, in *PushSetDeviceToken_Request, opts ...grpc.CallOption) (*PushSetDeviceToken_Reply, error)
	// PushSetServer registers a push server for the current device
	PushSetServer(ctx context.Context, in *PushSetServer_Request, opts ...grpc.CallOption) (*PushSetServer_Reply, error)
	// RefreshContactRequest try to refresh the contact request for the given contact
	RefreshContactRequest(ctx context.Context, in *RefreshContactRequest_Request, opts ...grpc.CallOption) (*RefreshContactRequest_Reply, error)
}

type protocolServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProtocolServiceClient(cc grpc.ClientConnInterface) ProtocolServiceClient {
	return &protocolServiceClient{cc}
}

func (c *protocolServiceClient) InstanceExportData(ctx context.Context, in *InstanceExportData_Request, opts ...grpc.CallOption) (ProtocolService_InstanceExportDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProtocolService_ServiceDesc.Streams[0], "/weshnet.protocol.v1.ProtocolService/InstanceExportData", opts...)
	if err != nil {
		return nil, err
	}
	x := &protocolServiceInstanceExportDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProtocolService_InstanceExportDataClient interface {
	Recv() (*InstanceExportData_Reply, error)
	grpc.ClientStream
}

type protocolServiceInstanceExportDataClient struct {
	grpc.ClientStream
}

func (x *protocolServiceInstanceExportDataClient) Recv() (*InstanceExportData_Reply, error) {
	m := new(InstanceExportData_Reply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *protocolServiceClient) InstanceGetConfiguration(ctx context.Context, in *InstanceGetConfiguration_Request, opts ...grpc.CallOption) (*InstanceGetConfiguration_Reply, error) {
	out := new(InstanceGetConfiguration_Reply)
	err := c.cc.Invoke(ctx, "/weshnet.protocol.v1.ProtocolService/InstanceGetConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) ContactRequestReference(ctx context.Context, in *ContactRequestReference_Request, opts ...grpc.CallOption) (*ContactRequestReference_Reply, error) {
	out := new(ContactRequestReference_Reply)
	err := c.cc.Invoke(ctx, "/weshnet.protocol.v1.ProtocolService/ContactRequestReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) ContactRequestDisable(ctx context.Context, in *ContactRequestDisable_Request, opts ...grpc.CallOption) (*ContactRequestDisable_Reply, error) {
	out := new(ContactRequestDisable_Reply)
	err := c.cc.Invoke(ctx, "/weshnet.protocol.v1.ProtocolService/ContactRequestDisable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) ContactRequestEnable(ctx context.Context, in *ContactRequestEnable_Request, opts ...grpc.CallOption) (*ContactRequestEnable_Reply, error) {
	out := new(ContactRequestEnable_Reply)
	err := c.cc.Invoke(ctx, "/weshnet.protocol.v1.ProtocolService/ContactRequestEnable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) ContactRequestResetReference(ctx context.Context, in *ContactRequestResetReference_Request, opts ...grpc.CallOption) (*ContactRequestResetReference_Reply, error) {
	out := new(ContactRequestResetReference_Reply)
	err := c.cc.Invoke(ctx, "/weshnet.protocol.v1.ProtocolService/ContactRequestResetReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) ContactRequestSend(ctx context.Context, in *ContactRequestSend_Request, opts ...grpc.CallOption) (*ContactRequestSend_Reply, error) {
	out := new(ContactRequestSend_Reply)
	err := c.cc.Invoke(ctx, "/weshnet.protocol.v1.ProtocolService/ContactRequestSend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) ContactRequestAccept(ctx context.Context, in *ContactRequestAccept_Request, opts ...grpc.CallOption) (*ContactRequestAccept_Reply, error) {
	out := new(ContactRequestAccept_Reply)
	err := c.cc.Invoke(ctx, "/weshnet.protocol.v1.ProtocolService/ContactRequestAccept", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) ContactRequestDiscard(ctx context.Context, in *ContactRequestDiscard_Request, opts ...grpc.CallOption) (*ContactRequestDiscard_Reply, error) {
	out := new(ContactRequestDiscard_Reply)
	err := c.cc.Invoke(ctx, "/weshnet.protocol.v1.ProtocolService/ContactRequestDiscard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) ContactBlock(ctx context.Context, in *ContactBlock_Request, opts ...grpc.CallOption) (*ContactBlock_Reply, error) {
	out := new(ContactBlock_Reply)
	err := c.cc.Invoke(ctx, "/weshnet.protocol.v1.ProtocolService/ContactBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) ContactUnblock(ctx context.Context, in *ContactUnblock_Request, opts ...grpc.CallOption) (*ContactUnblock_Reply, error) {
	out := new(ContactUnblock_Reply)
	err := c.cc.Invoke(ctx, "/weshnet.protocol.v1.ProtocolService/ContactUnblock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) ContactAliasKeySend(ctx context.Context, in *ContactAliasKeySend_Request, opts ...grpc.CallOption) (*ContactAliasKeySend_Reply, error) {
	out := new(ContactAliasKeySend_Reply)
	err := c.cc.Invoke(ctx, "/weshnet.protocol.v1.ProtocolService/ContactAliasKeySend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) MultiMemberGroupCreate(ctx context.Context, in *MultiMemberGroupCreate_Request, opts ...grpc.CallOption) (*MultiMemberGroupCreate_Reply, error) {
	out := new(MultiMemberGroupCreate_Reply)
	err := c.cc.Invoke(ctx, "/weshnet.protocol.v1.ProtocolService/MultiMemberGroupCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) MultiMemberGroupJoin(ctx context.Context, in *MultiMemberGroupJoin_Request, opts ...grpc.CallOption) (*MultiMemberGroupJoin_Reply, error) {
	out := new(MultiMemberGroupJoin_Reply)
	err := c.cc.Invoke(ctx, "/weshnet.protocol.v1.ProtocolService/MultiMemberGroupJoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) MultiMemberGroupLeave(ctx context.Context, in *MultiMemberGroupLeave_Request, opts ...grpc.CallOption) (*MultiMemberGroupLeave_Reply, error) {
	out := new(MultiMemberGroupLeave_Reply)
	err := c.cc.Invoke(ctx, "/weshnet.protocol.v1.ProtocolService/MultiMemberGroupLeave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) MultiMemberGroupAliasResolverDisclose(ctx context.Context, in *MultiMemberGroupAliasResolverDisclose_Request, opts ...grpc.CallOption) (*MultiMemberGroupAliasResolverDisclose_Reply, error) {
	out := new(MultiMemberGroupAliasResolverDisclose_Reply)
	err := c.cc.Invoke(ctx, "/weshnet.protocol.v1.ProtocolService/MultiMemberGroupAliasResolverDisclose", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) MultiMemberGroupAdminRoleGrant(ctx context.Context, in *MultiMemberGroupAdminRoleGrant_Request, opts ...grpc.CallOption) (*MultiMemberGroupAdminRoleGrant_Reply, error) {
	out := new(MultiMemberGroupAdminRoleGrant_Reply)
	err := c.cc.Invoke(ctx, "/weshnet.protocol.v1.ProtocolService/MultiMemberGroupAdminRoleGrant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) MultiMemberGroupInvitationCreate(ctx context.Context, in *MultiMemberGroupInvitationCreate_Request, opts ...grpc.CallOption) (*MultiMemberGroupInvitationCreate_Reply, error) {
	out := new(MultiMemberGroupInvitationCreate_Reply)
	err := c.cc.Invoke(ctx, "/weshnet.protocol.v1.ProtocolService/MultiMemberGroupInvitationCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) AppMetadataSend(ctx context.Context, in *AppMetadataSend_Request, opts ...grpc.CallOption) (*AppMetadataSend_Reply, error) {
	out := new(AppMetadataSend_Reply)
	err := c.cc.Invoke(ctx, "/weshnet.protocol.v1.ProtocolService/AppMetadataSend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) AppMessageSend(ctx context.Context, in *AppMessageSend_Request, opts ...grpc.CallOption) (*AppMessageSend_Reply, error) {
	out := new(AppMessageSend_Reply)
	err := c.cc.Invoke(ctx, "/weshnet.protocol.v1.ProtocolService/AppMessageSend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) GroupMetadataList(ctx context.Context, in *GroupMetadataList_Request, opts ...grpc.CallOption) (ProtocolService_GroupMetadataListClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProtocolService_ServiceDesc.Streams[1], "/weshnet.protocol.v1.ProtocolService/GroupMetadataList", opts...)
	if err != nil {
		return nil, err
	}
	x := &protocolServiceGroupMetadataListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProtocolService_GroupMetadataListClient interface {
	Recv() (*GroupMetadataEvent, error)
	grpc.ClientStream
}

type protocolServiceGroupMetadataListClient struct {
	grpc.ClientStream
}

func (x *protocolServiceGroupMetadataListClient) Recv() (*GroupMetadataEvent, error) {
	m := new(GroupMetadataEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *protocolServiceClient) GroupMessageList(ctx context.Context, in *GroupMessageList_Request, opts ...grpc.CallOption) (ProtocolService_GroupMessageListClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProtocolService_ServiceDesc.Streams[2], "/weshnet.protocol.v1.ProtocolService/GroupMessageList", opts...)
	if err != nil {
		return nil, err
	}
	x := &protocolServiceGroupMessageListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProtocolService_GroupMessageListClient interface {
	Recv() (*GroupMessageEvent, error)
	grpc.ClientStream
}

type protocolServiceGroupMessageListClient struct {
	grpc.ClientStream
}

func (x *protocolServiceGroupMessageListClient) Recv() (*GroupMessageEvent, error) {
	m := new(GroupMessageEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *protocolServiceClient) GroupInfo(ctx context.Context, in *GroupInfo_Request, opts ...grpc.CallOption) (*GroupInfo_Reply, error) {
	out := new(GroupInfo_Reply)
	err := c.cc.Invoke(ctx, "/weshnet.protocol.v1.ProtocolService/GroupInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) ActivateGroup(ctx context.Context, in *ActivateGroup_Request, opts ...grpc.CallOption) (*ActivateGroup_Reply, error) {
	out := new(ActivateGroup_Reply)
	err := c.cc.Invoke(ctx, "/weshnet.protocol.v1.ProtocolService/ActivateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) DeactivateGroup(ctx context.Context, in *DeactivateGroup_Request, opts ...grpc.CallOption) (*DeactivateGroup_Reply, error) {
	out := new(DeactivateGroup_Reply)
	err := c.cc.Invoke(ctx, "/weshnet.protocol.v1.ProtocolService/DeactivateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) GroupDeviceStatus(ctx context.Context, in *GroupDeviceStatus_Request, opts ...grpc.CallOption) (ProtocolService_GroupDeviceStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProtocolService_ServiceDesc.Streams[3], "/weshnet.protocol.v1.ProtocolService/GroupDeviceStatus", opts...)
	if err != nil {
		return nil, err
	}
	x := &protocolServiceGroupDeviceStatusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProtocolService_GroupDeviceStatusClient interface {
	Recv() (*GroupDeviceStatus_Reply, error)
	grpc.ClientStream
}

type protocolServiceGroupDeviceStatusClient struct {
	grpc.ClientStream
}

func (x *protocolServiceGroupDeviceStatusClient) Recv() (*GroupDeviceStatus_Reply, error) {
	m := new(GroupDeviceStatus_Reply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *protocolServiceClient) DebugListGroups(ctx context.Context, in *DebugListGroups_Request, opts ...grpc.CallOption) (ProtocolService_DebugListGroupsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProtocolService_ServiceDesc.Streams[4], "/weshnet.protocol.v1.ProtocolService/DebugListGroups", opts...)
	if err != nil {
		return nil, err
	}
	x := &protocolServiceDebugListGroupsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProtocolService_DebugListGroupsClient interface {
	Recv() (*DebugListGroups_Reply, error)
	grpc.ClientStream
}

type protocolServiceDebugListGroupsClient struct {
	grpc.ClientStream
}

func (x *protocolServiceDebugListGroupsClient) Recv() (*DebugListGroups_Reply, error) {
	m := new(DebugListGroups_Reply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *protocolServiceClient) DebugInspectGroupStore(ctx context.Context, in *DebugInspectGroupStore_Request, opts ...grpc.CallOption) (ProtocolService_DebugInspectGroupStoreClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProtocolService_ServiceDesc.Streams[5], "/weshnet.protocol.v1.ProtocolService/DebugInspectGroupStore", opts...)
	if err != nil {
		return nil, err
	}
	x := &protocolServiceDebugInspectGroupStoreClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProtocolService_DebugInspectGroupStoreClient interface {
	Recv() (*DebugInspectGroupStore_Reply, error)
	grpc.ClientStream
}

type protocolServiceDebugInspectGroupStoreClient struct {
	grpc.ClientStream
}

func (x *protocolServiceDebugInspectGroupStoreClient) Recv() (*DebugInspectGroupStore_Reply, error) {
	m := new(DebugInspectGroupStore_Reply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *protocolServiceClient) DebugGroup(ctx context.Context, in *DebugGroup_Request, opts ...grpc.CallOption) (*DebugGroup_Reply, error) {
	out := new(DebugGroup_Reply)
	err := c.cc.Invoke(ctx, "/weshnet.protocol.v1.ProtocolService/DebugGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) DebugAuthServiceSetToken(ctx context.Context, in *DebugAuthServiceSetToken_Request, opts ...grpc.CallOption) (*DebugAuthServiceSetToken_Reply, error) {
	out := new(DebugAuthServiceSetToken_Reply)
	err := c.cc.Invoke(ctx, "/weshnet.protocol.v1.ProtocolService/DebugAuthServiceSetToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) SystemInfo(ctx context.Context, in *SystemInfo_Request, opts ...grpc.CallOption) (*SystemInfo_Reply, error) {
	out := new(SystemInfo_Reply)
	err := c.cc.Invoke(ctx, "/weshnet.protocol.v1.ProtocolService/SystemInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) AuthServiceInitFlow(ctx context.Context, in *AuthServiceInitFlow_Request, opts ...grpc.CallOption) (*AuthServiceInitFlow_Reply, error) {
	out := new(AuthServiceInitFlow_Reply)
	err := c.cc.Invoke(ctx, "/weshnet.protocol.v1.ProtocolService/AuthServiceInitFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) AuthServiceCompleteFlow(ctx context.Context, in *AuthServiceCompleteFlow_Request, opts ...grpc.CallOption) (*AuthServiceCompleteFlow_Reply, error) {
	out := new(AuthServiceCompleteFlow_Reply)
	err := c.cc.Invoke(ctx, "/weshnet.protocol.v1.ProtocolService/AuthServiceCompleteFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) CredentialVerificationServiceInitFlow(ctx context.Context, in *CredentialVerificationServiceInitFlow_Request, opts ...grpc.CallOption) (*CredentialVerificationServiceInitFlow_Reply, error) {
	out := new(CredentialVerificationServiceInitFlow_Reply)
	err := c.cc.Invoke(ctx, "/weshnet.protocol.v1.ProtocolService/CredentialVerificationServiceInitFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) CredentialVerificationServiceCompleteFlow(ctx context.Context, in *CredentialVerificationServiceCompleteFlow_Request, opts ...grpc.CallOption) (*CredentialVerificationServiceCompleteFlow_Reply, error) {
	out := new(CredentialVerificationServiceCompleteFlow_Reply)
	err := c.cc.Invoke(ctx, "/weshnet.protocol.v1.ProtocolService/CredentialVerificationServiceCompleteFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) VerifiedCredentialsList(ctx context.Context, in *VerifiedCredentialsList_Request, opts ...grpc.CallOption) (*VerifiedCredentialsList_Reply, error) {
	out := new(VerifiedCredentialsList_Reply)
	err := c.cc.Invoke(ctx, "/weshnet.protocol.v1.ProtocolService/VerifiedCredentialsList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) ServicesTokenList(ctx context.Context, in *ServicesTokenList_Request, opts ...grpc.CallOption) (ProtocolService_ServicesTokenListClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProtocolService_ServiceDesc.Streams[6], "/weshnet.protocol.v1.ProtocolService/ServicesTokenList", opts...)
	if err != nil {
		return nil, err
	}
	x := &protocolServiceServicesTokenListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProtocolService_ServicesTokenListClient interface {
	Recv() (*ServicesTokenList_Reply, error)
	grpc.ClientStream
}

type protocolServiceServicesTokenListClient struct {
	grpc.ClientStream
}

func (x *protocolServiceServicesTokenListClient) Recv() (*ServicesTokenList_Reply, error) {
	m := new(ServicesTokenList_Reply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *protocolServiceClient) ReplicationServiceRegisterGroup(ctx context.Context, in *ReplicationServiceRegisterGroup_Request, opts ...grpc.CallOption) (*ReplicationServiceRegisterGroup_Reply, error) {
	out := new(ReplicationServiceRegisterGroup_Reply)
	err := c.cc.Invoke(ctx, "/weshnet.protocol.v1.ProtocolService/ReplicationServiceRegisterGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) PeerList(ctx context.Context, in *PeerList_Request, opts ...grpc.CallOption) (*PeerList_Reply, error) {
	out := new(PeerList_Reply)
	err := c.cc.Invoke(ctx, "/weshnet.protocol.v1.ProtocolService/PeerList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) PushReceive(ctx context.Context, in *PushReceive_Request, opts ...grpc.CallOption) (*PushReceive_Reply, error) {
	out := new(PushReceive_Reply)
	err := c.cc.Invoke(ctx, "/weshnet.protocol.v1.ProtocolService/PushReceive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) PushSend(ctx context.Context, in *PushSend_Request, opts ...grpc.CallOption) (*PushSend_Reply, error) {
	out := new(PushSend_Reply)
	err := c.cc.Invoke(ctx, "/weshnet.protocol.v1.ProtocolService/PushSend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) PushShareToken(ctx context.Context, in *PushShareToken_Request, opts ...grpc.CallOption) (*PushShareToken_Reply, error) {
	out := new(PushShareToken_Reply)
	err := c.cc.Invoke(ctx, "/weshnet.protocol.v1.ProtocolService/PushShareToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) PushSetDeviceToken(ctx context.Context, in *PushSetDeviceToken_Request, opts ...grpc.CallOption) (*PushSetDeviceToken_Reply, error) {
	out := new(PushSetDeviceToken_Reply)
	err := c.cc.Invoke(ctx, "/weshnet.protocol.v1.ProtocolService/PushSetDeviceToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) PushSetServer(ctx context.Context, in *PushSetServer_Request, opts ...grpc.CallOption) (*PushSetServer_Reply, error) {
	out := new(PushSetServer_Reply)
	err := c.cc.Invoke(ctx, "/weshnet.protocol.v1.ProtocolService/PushSetServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) RefreshContactRequest(ctx context.Context, in *RefreshContactRequest_Request, opts ...grpc.CallOption) (*RefreshContactRequest_Reply, error) {
	out := new(RefreshContactRequest_Reply)
	err := c.cc.Invoke(ctx, "/weshnet.protocol.v1.ProtocolService/RefreshContactRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProtocolServiceServer is the server API for ProtocolService service.
// All implementations must embed UnimplementedProtocolServiceServer
// for forward compatibility
type ProtocolServiceServer interface {
	// InstanceExportData exports instance data
	InstanceExportData(*InstanceExportData_Request, ProtocolService_InstanceExportDataServer) error
	// InstanceGetConfiguration gets current configuration of this protocol instance
	InstanceGetConfiguration(context.Context, *InstanceGetConfiguration_Request) (*InstanceGetConfiguration_Reply, error)
	// ContactRequestReference retrieves the information required to create a reference (ie. included in a shareable link) to the current account
	ContactRequestReference(context.Context, *ContactRequestReference_Request) (*ContactRequestReference_Reply, error)
	// ContactRequestDisable disables incoming contact requests
	ContactRequestDisable(context.Context, *ContactRequestDisable_Request) (*ContactRequestDisable_Reply, error)
	// ContactRequestEnable enables incoming contact requests
	ContactRequestEnable(context.Context, *ContactRequestEnable_Request) (*ContactRequestEnable_Reply, error)
	// ContactRequestResetReference changes the contact request reference
	ContactRequestResetReference(context.Context, *ContactRequestResetReference_Request) (*ContactRequestResetReference_Reply, error)
	// ContactRequestSend attempt to send a contact request
	ContactRequestSend(context.Context, *ContactRequestSend_Request) (*ContactRequestSend_Reply, error)
	// ContactRequestAccept accepts a contact request
	ContactRequestAccept(context.Context, *ContactRequestAccept_Request) (*ContactRequestAccept_Reply, error)
	// ContactRequestDiscard ignores a contact request, without informing the other user
	ContactRequestDiscard(context.Context, *ContactRequestDiscard_Request) (*ContactRequestDiscard_Reply, error)
	// ContactBlock blocks a contact from sending requests
	ContactBlock(context.Context, *ContactBlock_Request) (*ContactBlock_Reply, error)
	// ContactUnblock unblocks a contact from sending requests
	ContactUnblock(context.Context, *ContactUnblock_Request) (*ContactUnblock_Reply, error)
	// ContactAliasKeySend send an alias key to a contact, the contact will be able to assert that your account is being present on a multi-member group
	ContactAliasKeySend(context.Context, *ContactAliasKeySend_Request) (*ContactAliasKeySend_Reply, error)
	// MultiMemberGroupCreate creates a new multi-member group
	MultiMemberGroupCreate(context.Context, *MultiMemberGroupCreate_Request) (*MultiMemberGroupCreate_Reply, error)
	// MultiMemberGroupJoin joins a multi-member group
	MultiMemberGroupJoin(context.Context, *MultiMemberGroupJoin_Request) (*MultiMemberGroupJoin_Reply, error)
	// MultiMemberGroupLeave leaves a multi-member group
	MultiMemberGroupLeave(context.Context, *MultiMemberGroupLeave_Request) (*MultiMemberGroupLeave_Reply, error)
	// MultiMemberGroupAliasResolverDisclose discloses your alias resolver key
	MultiMemberGroupAliasResolverDisclose(context.Context, *MultiMemberGroupAliasResolverDisclose_Request) (*MultiMemberGroupAliasResolverDisclose_Reply, error)
	// MultiMemberGroupAdminRoleGrant grants an admin role to a group member
	MultiMemberGroupAdminRoleGrant(context.Context, *MultiMemberGroupAdminRoleGrant_Request) (*MultiMemberGroupAdminRoleGrant_Reply, error)
	// MultiMemberGroupInvitationCreate creates an invitation to a multi-member group
	MultiMemberGroupInvitationCreate(context.Context, *MultiMemberGroupInvitationCreate_Request) (*MultiMemberGroupInvitationCreate_Reply, error)
	// AppMetadataSend adds an app event to the metadata store, the message is encrypted using a symmetric key and readable by future group members
	AppMetadataSend(context.Context, *AppMetadataSend_Request) (*AppMetadataSend_Reply, error)
	// AppMessageSend adds an app event to the message store, the message is encrypted using a derived key and readable by current group members
	AppMessageSend(context.Context, *AppMessageSend_Request) (*AppMessageSend_Reply, error)
	// GroupMetadataList replays previous and subscribes to new metadata events from the group
	GroupMetadataList(*GroupMetadataList_Request, ProtocolService_GroupMetadataListServer) error
	// GroupMessageList replays previous and subscribes to new message events from the group
	GroupMessageList(*GroupMessageList_Request, ProtocolService_GroupMessageListServer) error
	// GroupInfo retrieves information about a group
	GroupInfo(context.Context, *GroupInfo_Request) (*GroupInfo_Reply, error)
	// ActivateGroup explicitly opens a group
	ActivateGroup(context.Context, *ActivateGroup_Request) (*ActivateGroup_Reply, error)
	// DeactivateGroup closes a group
	DeactivateGroup(context.Context, *DeactivateGroup_Request) (*DeactivateGroup_Reply, error)
	// GroupDeviceStatus monitor device status
	GroupDeviceStatus(*GroupDeviceStatus_Request, ProtocolService_GroupDeviceStatusServer) error
	DebugListGroups(*DebugListGroups_Request, ProtocolService_DebugListGroupsServer) error
	DebugInspectGroupStore(*DebugInspectGroupStore_Request, ProtocolService_DebugInspectGroupStoreServer) error
	DebugGroup(context.Context, *DebugGroup_Request) (*DebugGroup_Reply, error)
	DebugAuthServiceSetToken(context.Context, *DebugAuthServiceSetToken_Request) (*DebugAuthServiceSetToken_Reply, error)
	SystemInfo(context.Context, *SystemInfo_Request) (*SystemInfo_Reply, error)
	// AuthServiceInitFlow Initialize an authentication flow
	AuthServiceInitFlow(context.Context, *AuthServiceInitFlow_Request) (*AuthServiceInitFlow_Reply, error)
	// AuthServiceCompleteFlow Completes an authentication flow
	AuthServiceCompleteFlow(context.Context, *AuthServiceCompleteFlow_Request) (*AuthServiceCompleteFlow_Reply, error)
	// CredentialVerificationServiceInitFlow Initialize a credential verification flow
	CredentialVerificationServiceInitFlow(context.Context, *CredentialVerificationServiceInitFlow_Request) (*CredentialVerificationServiceInitFlow_Reply, error)
	// CredentialVerificationServiceCompleteFlow Completes a credential verification flow
	CredentialVerificationServiceCompleteFlow(context.Context, *CredentialVerificationServiceCompleteFlow_Request) (*CredentialVerificationServiceCompleteFlow_Reply, error)
	// VerifiedCredentialsList Retrieves the list of verified credentials
	VerifiedCredentialsList(context.Context, *VerifiedCredentialsList_Request) (*VerifiedCredentialsList_Reply, error)
	// ServicesTokenList Retrieves the list of services tokens
	ServicesTokenList(*ServicesTokenList_Request, ProtocolService_ServicesTokenListServer) error
	// ReplicationServiceRegisterGroup Asks a replication service to distribute a group contents
	ReplicationServiceRegisterGroup(context.Context, *ReplicationServiceRegisterGroup_Request) (*ReplicationServiceRegisterGroup_Reply, error)
	// PeerList returns a list of P2P peers
	PeerList(context.Context, *PeerList_Request) (*PeerList_Reply, error)
	// PushReceive handles a push payload, decrypts it if possible
	PushReceive(context.Context, *PushReceive_Request) (*PushReceive_Reply, error)
	// PushSend sends a push payload to a specified list of group members
	PushSend(context.Context, *PushSend_Request) (*PushSend_Reply, error)
	// PushShareToken sends push tokens of own devices to a group
	PushShareToken(context.Context, *PushShareToken_Request) (*PushShareToken_Reply, error)
	// PushSetDeviceToken registers a push token for the current device
	PushSetDeviceToken(context.Context, *PushSetDeviceToken_Request) (*PushSetDeviceToken_Reply, error)
	// PushSetServer registers a push server for the current device
	PushSetServer(context.Context, *PushSetServer_Request) (*PushSetServer_Reply, error)
	// RefreshContactRequest try to refresh the contact request for the given contact
	RefreshContactRequest(context.Context, *RefreshContactRequest_Request) (*RefreshContactRequest_Reply, error)
	mustEmbedUnimplementedProtocolServiceServer()
}

// UnimplementedProtocolServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProtocolServiceServer struct {
}

func (UnimplementedProtocolServiceServer) InstanceExportData(*InstanceExportData_Request, ProtocolService_InstanceExportDataServer) error {
	return status.Errorf(codes.Unimplemented, "method InstanceExportData not implemented")
}
func (UnimplementedProtocolServiceServer) InstanceGetConfiguration(context.Context, *InstanceGetConfiguration_Request) (*InstanceGetConfiguration_Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstanceGetConfiguration not implemented")
}
func (UnimplementedProtocolServiceServer) ContactRequestReference(context.Context, *ContactRequestReference_Request) (*ContactRequestReference_Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactRequestReference not implemented")
}
func (UnimplementedProtocolServiceServer) ContactRequestDisable(context.Context, *ContactRequestDisable_Request) (*ContactRequestDisable_Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactRequestDisable not implemented")
}
func (UnimplementedProtocolServiceServer) ContactRequestEnable(context.Context, *ContactRequestEnable_Request) (*ContactRequestEnable_Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactRequestEnable not implemented")
}
func (UnimplementedProtocolServiceServer) ContactRequestResetReference(context.Context, *ContactRequestResetReference_Request) (*ContactRequestResetReference_Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactRequestResetReference not implemented")
}
func (UnimplementedProtocolServiceServer) ContactRequestSend(context.Context, *ContactRequestSend_Request) (*ContactRequestSend_Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactRequestSend not implemented")
}
func (UnimplementedProtocolServiceServer) ContactRequestAccept(context.Context, *ContactRequestAccept_Request) (*ContactRequestAccept_Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactRequestAccept not implemented")
}
func (UnimplementedProtocolServiceServer) ContactRequestDiscard(context.Context, *ContactRequestDiscard_Request) (*ContactRequestDiscard_Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactRequestDiscard not implemented")
}
func (UnimplementedProtocolServiceServer) ContactBlock(context.Context, *ContactBlock_Request) (*ContactBlock_Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactBlock not implemented")
}
func (UnimplementedProtocolServiceServer) ContactUnblock(context.Context, *ContactUnblock_Request) (*ContactUnblock_Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactUnblock not implemented")
}
func (UnimplementedProtocolServiceServer) ContactAliasKeySend(context.Context, *ContactAliasKeySend_Request) (*ContactAliasKeySend_Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactAliasKeySend not implemented")
}
func (UnimplementedProtocolServiceServer) MultiMemberGroupCreate(context.Context, *MultiMemberGroupCreate_Request) (*MultiMemberGroupCreate_Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiMemberGroupCreate not implemented")
}
func (UnimplementedProtocolServiceServer) MultiMemberGroupJoin(context.Context, *MultiMemberGroupJoin_Request) (*MultiMemberGroupJoin_Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiMemberGroupJoin not implemented")
}
func (UnimplementedProtocolServiceServer) MultiMemberGroupLeave(context.Context, *MultiMemberGroupLeave_Request) (*MultiMemberGroupLeave_Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiMemberGroupLeave not implemented")
}
func (UnimplementedProtocolServiceServer) MultiMemberGroupAliasResolverDisclose(context.Context, *MultiMemberGroupAliasResolverDisclose_Request) (*MultiMemberGroupAliasResolverDisclose_Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiMemberGroupAliasResolverDisclose not implemented")
}
func (UnimplementedProtocolServiceServer) MultiMemberGroupAdminRoleGrant(context.Context, *MultiMemberGroupAdminRoleGrant_Request) (*MultiMemberGroupAdminRoleGrant_Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiMemberGroupAdminRoleGrant not implemented")
}
func (UnimplementedProtocolServiceServer) MultiMemberGroupInvitationCreate(context.Context, *MultiMemberGroupInvitationCreate_Request) (*MultiMemberGroupInvitationCreate_Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiMemberGroupInvitationCreate not implemented")
}
func (UnimplementedProtocolServiceServer) AppMetadataSend(context.Context, *AppMetadataSend_Request) (*AppMetadataSend_Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppMetadataSend not implemented")
}
func (UnimplementedProtocolServiceServer) AppMessageSend(context.Context, *AppMessageSend_Request) (*AppMessageSend_Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppMessageSend not implemented")
}
func (UnimplementedProtocolServiceServer) GroupMetadataList(*GroupMetadataList_Request, ProtocolService_GroupMetadataListServer) error {
	return status.Errorf(codes.Unimplemented, "method GroupMetadataList not implemented")
}
func (UnimplementedProtocolServiceServer) GroupMessageList(*GroupMessageList_Request, ProtocolService_GroupMessageListServer) error {
	return status.Errorf(codes.Unimplemented, "method GroupMessageList not implemented")
}
func (UnimplementedProtocolServiceServer) GroupInfo(context.Context, *GroupInfo_Request) (*GroupInfo_Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupInfo not implemented")
}
func (UnimplementedProtocolServiceServer) ActivateGroup(context.Context, *ActivateGroup_Request) (*ActivateGroup_Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateGroup not implemented")
}
func (UnimplementedProtocolServiceServer) DeactivateGroup(context.Context, *DeactivateGroup_Request) (*DeactivateGroup_Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateGroup not implemented")
}
func (UnimplementedProtocolServiceServer) GroupDeviceStatus(*GroupDeviceStatus_Request, ProtocolService_GroupDeviceStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method GroupDeviceStatus not implemented")
}
func (UnimplementedProtocolServiceServer) DebugListGroups(*DebugListGroups_Request, ProtocolService_DebugListGroupsServer) error {
	return status.Errorf(codes.Unimplemented, "method DebugListGroups not implemented")
}
func (UnimplementedProtocolServiceServer) DebugInspectGroupStore(*DebugInspectGroupStore_Request, ProtocolService_DebugInspectGroupStoreServer) error {
	return status.Errorf(codes.Unimplemented, "method DebugInspectGroupStore not implemented")
}
func (UnimplementedProtocolServiceServer) DebugGroup(context.Context, *DebugGroup_Request) (*DebugGroup_Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DebugGroup not implemented")
}
func (UnimplementedProtocolServiceServer) DebugAuthServiceSetToken(context.Context, *DebugAuthServiceSetToken_Request) (*DebugAuthServiceSetToken_Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DebugAuthServiceSetToken not implemented")
}
func (UnimplementedProtocolServiceServer) SystemInfo(context.Context, *SystemInfo_Request) (*SystemInfo_Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemInfo not implemented")
}
func (UnimplementedProtocolServiceServer) AuthServiceInitFlow(context.Context, *AuthServiceInitFlow_Request) (*AuthServiceInitFlow_Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthServiceInitFlow not implemented")
}
func (UnimplementedProtocolServiceServer) AuthServiceCompleteFlow(context.Context, *AuthServiceCompleteFlow_Request) (*AuthServiceCompleteFlow_Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthServiceCompleteFlow not implemented")
}
func (UnimplementedProtocolServiceServer) CredentialVerificationServiceInitFlow(context.Context, *CredentialVerificationServiceInitFlow_Request) (*CredentialVerificationServiceInitFlow_Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CredentialVerificationServiceInitFlow not implemented")
}
func (UnimplementedProtocolServiceServer) CredentialVerificationServiceCompleteFlow(context.Context, *CredentialVerificationServiceCompleteFlow_Request) (*CredentialVerificationServiceCompleteFlow_Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CredentialVerificationServiceCompleteFlow not implemented")
}
func (UnimplementedProtocolServiceServer) VerifiedCredentialsList(context.Context, *VerifiedCredentialsList_Request) (*VerifiedCredentialsList_Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifiedCredentialsList not implemented")
}
func (UnimplementedProtocolServiceServer) ServicesTokenList(*ServicesTokenList_Request, ProtocolService_ServicesTokenListServer) error {
	return status.Errorf(codes.Unimplemented, "method ServicesTokenList not implemented")
}
func (UnimplementedProtocolServiceServer) ReplicationServiceRegisterGroup(context.Context, *ReplicationServiceRegisterGroup_Request) (*ReplicationServiceRegisterGroup_Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplicationServiceRegisterGroup not implemented")
}
func (UnimplementedProtocolServiceServer) PeerList(context.Context, *PeerList_Request) (*PeerList_Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PeerList not implemented")
}
func (UnimplementedProtocolServiceServer) PushReceive(context.Context, *PushReceive_Request) (*PushReceive_Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushReceive not implemented")
}
func (UnimplementedProtocolServiceServer) PushSend(context.Context, *PushSend_Request) (*PushSend_Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushSend not implemented")
}
func (UnimplementedProtocolServiceServer) PushShareToken(context.Context, *PushShareToken_Request) (*PushShareToken_Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushShareToken not implemented")
}
func (UnimplementedProtocolServiceServer) PushSetDeviceToken(context.Context, *PushSetDeviceToken_Request) (*PushSetDeviceToken_Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushSetDeviceToken not implemented")
}
func (UnimplementedProtocolServiceServer) PushSetServer(context.Context, *PushSetServer_Request) (*PushSetServer_Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushSetServer not implemented")
}
func (UnimplementedProtocolServiceServer) RefreshContactRequest(context.Context, *RefreshContactRequest_Request) (*RefreshContactRequest_Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshContactRequest not implemented")
}
func (UnimplementedProtocolServiceServer) mustEmbedUnimplementedProtocolServiceServer() {}

// UnsafeProtocolServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProtocolServiceServer will
// result in compilation errors.
type UnsafeProtocolServiceServer interface {
	mustEmbedUnimplementedProtocolServiceServer()
}

func RegisterProtocolServiceServer(s grpc.ServiceRegistrar, srv ProtocolServiceServer) {
	s.RegisterService(&ProtocolService_ServiceDesc, srv)
}

func _ProtocolService_InstanceExportData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InstanceExportData_Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProtocolServiceServer).InstanceExportData(m, &protocolServiceInstanceExportDataServer{stream})
}

type ProtocolService_InstanceExportDataServer interface {
	Send(*InstanceExportData_Reply) error
	grpc.ServerStream
}

type protocolServiceInstanceExportDataServer struct {
	grpc.ServerStream
}

func (x *protocolServiceInstanceExportDataServer) Send(m *InstanceExportData_Reply) error {
	return x.ServerStream.SendMsg(m)
}

func _ProtocolService_InstanceGetConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstanceGetConfiguration_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).InstanceGetConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weshnet.protocol.v1.ProtocolService/InstanceGetConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).InstanceGetConfiguration(ctx, req.(*InstanceGetConfiguration_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_ContactRequestReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactRequestReference_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).ContactRequestReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weshnet.protocol.v1.ProtocolService/ContactRequestReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).ContactRequestReference(ctx, req.(*ContactRequestReference_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_ContactRequestDisable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactRequestDisable_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).ContactRequestDisable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weshnet.protocol.v1.ProtocolService/ContactRequestDisable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).ContactRequestDisable(ctx, req.(*ContactRequestDisable_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_ContactRequestEnable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactRequestEnable_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).ContactRequestEnable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weshnet.protocol.v1.ProtocolService/ContactRequestEnable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).ContactRequestEnable(ctx, req.(*ContactRequestEnable_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_ContactRequestResetReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactRequestResetReference_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).ContactRequestResetReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weshnet.protocol.v1.ProtocolService/ContactRequestResetReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).ContactRequestResetReference(ctx, req.(*ContactRequestResetReference_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_ContactRequestSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactRequestSend_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).ContactRequestSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weshnet.protocol.v1.ProtocolService/ContactRequestSend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).ContactRequestSend(ctx, req.(*ContactRequestSend_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_ContactRequestAccept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactRequestAccept_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).ContactRequestAccept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weshnet.protocol.v1.ProtocolService/ContactRequestAccept",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).ContactRequestAccept(ctx, req.(*ContactRequestAccept_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_ContactRequestDiscard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactRequestDiscard_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).ContactRequestDiscard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weshnet.protocol.v1.ProtocolService/ContactRequestDiscard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).ContactRequestDiscard(ctx, req.(*ContactRequestDiscard_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_ContactBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactBlock_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).ContactBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weshnet.protocol.v1.ProtocolService/ContactBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).ContactBlock(ctx, req.(*ContactBlock_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_ContactUnblock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactUnblock_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).ContactUnblock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weshnet.protocol.v1.ProtocolService/ContactUnblock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).ContactUnblock(ctx, req.(*ContactUnblock_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_ContactAliasKeySend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactAliasKeySend_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).ContactAliasKeySend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weshnet.protocol.v1.ProtocolService/ContactAliasKeySend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).ContactAliasKeySend(ctx, req.(*ContactAliasKeySend_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_MultiMemberGroupCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiMemberGroupCreate_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).MultiMemberGroupCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weshnet.protocol.v1.ProtocolService/MultiMemberGroupCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).MultiMemberGroupCreate(ctx, req.(*MultiMemberGroupCreate_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_MultiMemberGroupJoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiMemberGroupJoin_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).MultiMemberGroupJoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weshnet.protocol.v1.ProtocolService/MultiMemberGroupJoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).MultiMemberGroupJoin(ctx, req.(*MultiMemberGroupJoin_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_MultiMemberGroupLeave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiMemberGroupLeave_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).MultiMemberGroupLeave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weshnet.protocol.v1.ProtocolService/MultiMemberGroupLeave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).MultiMemberGroupLeave(ctx, req.(*MultiMemberGroupLeave_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_MultiMemberGroupAliasResolverDisclose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiMemberGroupAliasResolverDisclose_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).MultiMemberGroupAliasResolverDisclose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weshnet.protocol.v1.ProtocolService/MultiMemberGroupAliasResolverDisclose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).MultiMemberGroupAliasResolverDisclose(ctx, req.(*MultiMemberGroupAliasResolverDisclose_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_MultiMemberGroupAdminRoleGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiMemberGroupAdminRoleGrant_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).MultiMemberGroupAdminRoleGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weshnet.protocol.v1.ProtocolService/MultiMemberGroupAdminRoleGrant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).MultiMemberGroupAdminRoleGrant(ctx, req.(*MultiMemberGroupAdminRoleGrant_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_MultiMemberGroupInvitationCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiMemberGroupInvitationCreate_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).MultiMemberGroupInvitationCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weshnet.protocol.v1.ProtocolService/MultiMemberGroupInvitationCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).MultiMemberGroupInvitationCreate(ctx, req.(*MultiMemberGroupInvitationCreate_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_AppMetadataSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppMetadataSend_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).AppMetadataSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weshnet.protocol.v1.ProtocolService/AppMetadataSend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).AppMetadataSend(ctx, req.(*AppMetadataSend_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_AppMessageSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppMessageSend_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).AppMessageSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weshnet.protocol.v1.ProtocolService/AppMessageSend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).AppMessageSend(ctx, req.(*AppMessageSend_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_GroupMetadataList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GroupMetadataList_Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProtocolServiceServer).GroupMetadataList(m, &protocolServiceGroupMetadataListServer{stream})
}

type ProtocolService_GroupMetadataListServer interface {
	Send(*GroupMetadataEvent) error
	grpc.ServerStream
}

type protocolServiceGroupMetadataListServer struct {
	grpc.ServerStream
}

func (x *protocolServiceGroupMetadataListServer) Send(m *GroupMetadataEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _ProtocolService_GroupMessageList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GroupMessageList_Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProtocolServiceServer).GroupMessageList(m, &protocolServiceGroupMessageListServer{stream})
}

type ProtocolService_GroupMessageListServer interface {
	Send(*GroupMessageEvent) error
	grpc.ServerStream
}

type protocolServiceGroupMessageListServer struct {
	grpc.ServerStream
}

func (x *protocolServiceGroupMessageListServer) Send(m *GroupMessageEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _ProtocolService_GroupInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupInfo_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).GroupInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weshnet.protocol.v1.ProtocolService/GroupInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).GroupInfo(ctx, req.(*GroupInfo_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_ActivateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateGroup_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).ActivateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weshnet.protocol.v1.ProtocolService/ActivateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).ActivateGroup(ctx, req.(*ActivateGroup_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_DeactivateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateGroup_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).DeactivateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weshnet.protocol.v1.ProtocolService/DeactivateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).DeactivateGroup(ctx, req.(*DeactivateGroup_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_GroupDeviceStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GroupDeviceStatus_Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProtocolServiceServer).GroupDeviceStatus(m, &protocolServiceGroupDeviceStatusServer{stream})
}

type ProtocolService_GroupDeviceStatusServer interface {
	Send(*GroupDeviceStatus_Reply) error
	grpc.ServerStream
}

type protocolServiceGroupDeviceStatusServer struct {
	grpc.ServerStream
}

func (x *protocolServiceGroupDeviceStatusServer) Send(m *GroupDeviceStatus_Reply) error {
	return x.ServerStream.SendMsg(m)
}

func _ProtocolService_DebugListGroups_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DebugListGroups_Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProtocolServiceServer).DebugListGroups(m, &protocolServiceDebugListGroupsServer{stream})
}

type ProtocolService_DebugListGroupsServer interface {
	Send(*DebugListGroups_Reply) error
	grpc.ServerStream
}

type protocolServiceDebugListGroupsServer struct {
	grpc.ServerStream
}

func (x *protocolServiceDebugListGroupsServer) Send(m *DebugListGroups_Reply) error {
	return x.ServerStream.SendMsg(m)
}

func _ProtocolService_DebugInspectGroupStore_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DebugInspectGroupStore_Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProtocolServiceServer).DebugInspectGroupStore(m, &protocolServiceDebugInspectGroupStoreServer{stream})
}

type ProtocolService_DebugInspectGroupStoreServer interface {
	Send(*DebugInspectGroupStore_Reply) error
	grpc.ServerStream
}

type protocolServiceDebugInspectGroupStoreServer struct {
	grpc.ServerStream
}

func (x *protocolServiceDebugInspectGroupStoreServer) Send(m *DebugInspectGroupStore_Reply) error {
	return x.ServerStream.SendMsg(m)
}

func _ProtocolService_DebugGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DebugGroup_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).DebugGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weshnet.protocol.v1.ProtocolService/DebugGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).DebugGroup(ctx, req.(*DebugGroup_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_DebugAuthServiceSetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DebugAuthServiceSetToken_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).DebugAuthServiceSetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weshnet.protocol.v1.ProtocolService/DebugAuthServiceSetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).DebugAuthServiceSetToken(ctx, req.(*DebugAuthServiceSetToken_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_SystemInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemInfo_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).SystemInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weshnet.protocol.v1.ProtocolService/SystemInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).SystemInfo(ctx, req.(*SystemInfo_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_AuthServiceInitFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthServiceInitFlow_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).AuthServiceInitFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weshnet.protocol.v1.ProtocolService/AuthServiceInitFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).AuthServiceInitFlow(ctx, req.(*AuthServiceInitFlow_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_AuthServiceCompleteFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthServiceCompleteFlow_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).AuthServiceCompleteFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weshnet.protocol.v1.ProtocolService/AuthServiceCompleteFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).AuthServiceCompleteFlow(ctx, req.(*AuthServiceCompleteFlow_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_CredentialVerificationServiceInitFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CredentialVerificationServiceInitFlow_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).CredentialVerificationServiceInitFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weshnet.protocol.v1.ProtocolService/CredentialVerificationServiceInitFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).CredentialVerificationServiceInitFlow(ctx, req.(*CredentialVerificationServiceInitFlow_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_CredentialVerificationServiceCompleteFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CredentialVerificationServiceCompleteFlow_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).CredentialVerificationServiceCompleteFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weshnet.protocol.v1.ProtocolService/CredentialVerificationServiceCompleteFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).CredentialVerificationServiceCompleteFlow(ctx, req.(*CredentialVerificationServiceCompleteFlow_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_VerifiedCredentialsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifiedCredentialsList_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).VerifiedCredentialsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weshnet.protocol.v1.ProtocolService/VerifiedCredentialsList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).VerifiedCredentialsList(ctx, req.(*VerifiedCredentialsList_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_ServicesTokenList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ServicesTokenList_Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProtocolServiceServer).ServicesTokenList(m, &protocolServiceServicesTokenListServer{stream})
}

type ProtocolService_ServicesTokenListServer interface {
	Send(*ServicesTokenList_Reply) error
	grpc.ServerStream
}

type protocolServiceServicesTokenListServer struct {
	grpc.ServerStream
}

func (x *protocolServiceServicesTokenListServer) Send(m *ServicesTokenList_Reply) error {
	return x.ServerStream.SendMsg(m)
}

func _ProtocolService_ReplicationServiceRegisterGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplicationServiceRegisterGroup_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).ReplicationServiceRegisterGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weshnet.protocol.v1.ProtocolService/ReplicationServiceRegisterGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).ReplicationServiceRegisterGroup(ctx, req.(*ReplicationServiceRegisterGroup_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_PeerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeerList_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).PeerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weshnet.protocol.v1.ProtocolService/PeerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).PeerList(ctx, req.(*PeerList_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_PushReceive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushReceive_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).PushReceive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weshnet.protocol.v1.ProtocolService/PushReceive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).PushReceive(ctx, req.(*PushReceive_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_PushSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushSend_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).PushSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weshnet.protocol.v1.ProtocolService/PushSend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).PushSend(ctx, req.(*PushSend_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_PushShareToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushShareToken_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).PushShareToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weshnet.protocol.v1.ProtocolService/PushShareToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).PushShareToken(ctx, req.(*PushShareToken_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_PushSetDeviceToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushSetDeviceToken_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).PushSetDeviceToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weshnet.protocol.v1.ProtocolService/PushSetDeviceToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).PushSetDeviceToken(ctx, req.(*PushSetDeviceToken_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_PushSetServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushSetServer_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).PushSetServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weshnet.protocol.v1.ProtocolService/PushSetServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).PushSetServer(ctx, req.(*PushSetServer_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_RefreshContactRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshContactRequest_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).RefreshContactRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weshnet.protocol.v1.ProtocolService/RefreshContactRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).RefreshContactRequest(ctx, req.(*RefreshContactRequest_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// ProtocolService_ServiceDesc is the grpc.ServiceDesc for ProtocolService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProtocolService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "weshnet.protocol.v1.ProtocolService",
	HandlerType: (*ProtocolServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InstanceGetConfiguration",
			Handler:    _ProtocolService_InstanceGetConfiguration_Handler,
		},
		{
			MethodName: "ContactRequestReference",
			Handler:    _ProtocolService_ContactRequestReference_Handler,
		},
		{
			MethodName: "ContactRequestDisable",
			Handler:    _ProtocolService_ContactRequestDisable_Handler,
		},
		{
			MethodName: "ContactRequestEnable",
			Handler:    _ProtocolService_ContactRequestEnable_Handler,
		},
		{
			MethodName: "ContactRequestResetReference",
			Handler:    _ProtocolService_ContactRequestResetReference_Handler,
		},
		{
			MethodName: "ContactRequestSend",
			Handler:    _ProtocolService_ContactRequestSend_Handler,
		},
		{
			MethodName: "ContactRequestAccept",
			Handler:    _ProtocolService_ContactRequestAccept_Handler,
		},
		{
			MethodName: "ContactRequestDiscard",
			Handler:    _ProtocolService_ContactRequestDiscard_Handler,
		},
		{
			MethodName: "ContactBlock",
			Handler:    _ProtocolService_ContactBlock_Handler,
		},
		{
			MethodName: "ContactUnblock",
			Handler:    _ProtocolService_ContactUnblock_Handler,
		},
		{
			MethodName: "ContactAliasKeySend",
			Handler:    _ProtocolService_ContactAliasKeySend_Handler,
		},
		{
			MethodName: "MultiMemberGroupCreate",
			Handler:    _ProtocolService_MultiMemberGroupCreate_Handler,
		},
		{
			MethodName: "MultiMemberGroupJoin",
			Handler:    _ProtocolService_MultiMemberGroupJoin_Handler,
		},
		{
			MethodName: "MultiMemberGroupLeave",
			Handler:    _ProtocolService_MultiMemberGroupLeave_Handler,
		},
		{
			MethodName: "MultiMemberGroupAliasResolverDisclose",
			Handler:    _ProtocolService_MultiMemberGroupAliasResolverDisclose_Handler,
		},
		{
			MethodName: "MultiMemberGroupAdminRoleGrant",
			Handler:    _ProtocolService_MultiMemberGroupAdminRoleGrant_Handler,
		},
		{
			MethodName: "MultiMemberGroupInvitationCreate",
			Handler:    _ProtocolService_MultiMemberGroupInvitationCreate_Handler,
		},
		{
			MethodName: "AppMetadataSend",
			Handler:    _ProtocolService_AppMetadataSend_Handler,
		},
		{
			MethodName: "AppMessageSend",
			Handler:    _ProtocolService_AppMessageSend_Handler,
		},
		{
			MethodName: "GroupInfo",
			Handler:    _ProtocolService_GroupInfo_Handler,
		},
		{
			MethodName: "ActivateGroup",
			Handler:    _ProtocolService_ActivateGroup_Handler,
		},
		{
			MethodName: "DeactivateGroup",
			Handler:    _ProtocolService_DeactivateGroup_Handler,
		},
		{
			MethodName: "DebugGroup",
			Handler:    _ProtocolService_DebugGroup_Handler,
		},
		{
			MethodName: "DebugAuthServiceSetToken",
			Handler:    _ProtocolService_DebugAuthServiceSetToken_Handler,
		},
		{
			MethodName: "SystemInfo",
			Handler:    _ProtocolService_SystemInfo_Handler,
		},
		{
			MethodName: "AuthServiceInitFlow",
			Handler:    _ProtocolService_AuthServiceInitFlow_Handler,
		},
		{
			MethodName: "AuthServiceCompleteFlow",
			Handler:    _ProtocolService_AuthServiceCompleteFlow_Handler,
		},
		{
			MethodName: "CredentialVerificationServiceInitFlow",
			Handler:    _ProtocolService_CredentialVerificationServiceInitFlow_Handler,
		},
		{
			MethodName: "CredentialVerificationServiceCompleteFlow",
			Handler:    _ProtocolService_CredentialVerificationServiceCompleteFlow_Handler,
		},
		{
			MethodName: "VerifiedCredentialsList",
			Handler:    _ProtocolService_VerifiedCredentialsList_Handler,
		},
		{
			MethodName: "ReplicationServiceRegisterGroup",
			Handler:    _ProtocolService_ReplicationServiceRegisterGroup_Handler,
		},
		{
			MethodName: "PeerList",
			Handler:    _ProtocolService_PeerList_Handler,
		},
		{
			MethodName: "PushReceive",
			Handler:    _ProtocolService_PushReceive_Handler,
		},
		{
			MethodName: "PushSend",
			Handler:    _ProtocolService_PushSend_Handler,
		},
		{
			MethodName: "PushShareToken",
			Handler:    _ProtocolService_PushShareToken_Handler,
		},
		{
			MethodName: "PushSetDeviceToken",
			Handler:    _ProtocolService_PushSetDeviceToken_Handler,
		},
		{
			MethodName: "PushSetServer",
			Handler:    _ProtocolService_PushSetServer_Handler,
		},
		{
			MethodName: "RefreshContactRequest",
			Handler:    _ProtocolService_RefreshContactRequest_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "InstanceExportData",
			Handler:       _ProtocolService_InstanceExportData_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GroupMetadataList",
			Handler:       _ProtocolService_GroupMetadataList_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GroupMessageList",
			Handler:       _ProtocolService_GroupMessageList_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GroupDeviceStatus",
			Handler:       _ProtocolService_GroupDeviceStatus_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DebugListGroups",
			Handler:       _ProtocolService_DebugListGroups_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DebugInspectGroupStore",
			Handler:       _ProtocolService_DebugInspectGroupStore_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ServicesTokenList",
			Handler:       _ProtocolService_ServicesTokenList_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protocoltypes.proto",
}
