syntax = "proto3";

option go_package = "berty.tech/go/pkg/bertyprotocol";

import "google/protobuf/descriptor.proto";

// type Client struct

// c, err := ClientNew(&Config{})

service ClientManager {
  rpc CurrentDeviceExportData (CurrentDeviceExportDataRequest) returns (CurrentDeviceExportDataReply);
  rpc CurrentDeviceGetConfiguration (CurrentDeviceGetConfigurationRequest) returns (CurrentDeviceGetConfigurationReply);
}

service AccountManager {
  rpc AccountGetConfiguration (AccountGetConfigurationRequest) returns (AccountGetConfigurationReply);
  rpc AccountGetInformation (AccountGetInformationRequest) returns (AccountGetInformationReply);
  rpc AccountLinkNewDevice (AccountLinkNewDeviceRequest) returns (AccountLinkNewDeviceReply);
  rpc AccountDisableIncomingContactRequest (AccountDisableIncomingContactRequestRequest) returns (AccountDisableIncomingContactRequestReply);
  rpc AccountEnableIncomingContactRequest (AccountEnableIncomingContactRequestRequest) returns (AccountEnableIncomingContactRequestReply);
  rpc AccountResetIncomingContactRequestLink (AccountResetIncomingContactRequestLinkRequest) returns (AccountResetIncomingContactRequestLinkReply);
}

service EventManager {
  rpc EventSubscribe (EventSubscribeRequest) returns (stream EventStream);
}

service ContactRequestManager {
  rpc ContactRequestAccept (ContactRequestAcceptRequest) returns (ContactRequestAcceptReply);
  rpc ContactRequestDiscard (ContactRequestDiscardRequest) returns (ContactRequestDiscardReply);
  rpc ContactRequestListIncoming (ContactRequestListIncomingRequest) returns (stream ContactRequestListIncomingReply);
  rpc ContactRequestListOutgoing (ContactRequestListOutgoingRequest) returns (stream ContactRequestListOutgoingReply);
  rpc ContactRequestSend (ContactRequestSendRequest) returns (ContactRequestSendReply);
}

service ContactManager {
  rpc ContactGet (ContactGetRequest) returns (ContactGetReply);
  rpc ContactList (ContactListRequest) returns (stream ContactListReply);
  rpc ContactRemove (ContactRemoveRequest) returns (ContactRemoveReply);
}

service StreamManager {
  rpc StreamManagerRequestToContact (StreamManagerRequestToContactRequest) returns (StreamManagerRequestToContactReply);
  rpc StreamManagerAccept (stream StreamManagerAcceptRequest) returns (stream StreamManagerAcceptReply);
}

// TODO: check comment below
// A Group is a set of Devices, which can be between a user own Devices or two or more individuals.
// All communication between devices except ContactRequests goes through a Group

service GroupManager {
  rpc GroupCreate (GroupCreateRequest) returns (GroupCreateReply);
  rpc GroupGenerateInviteLink (GroupGenerateInviteLinkRequest) returns (GroupGenerateInviteLinkReply);
  rpc GroupLeave (GroupLeaveRequest) returns (GroupLeaveReply);
  rpc GroupList (GroupListRequest) returns (stream GroupListReply);
  rpc GroupMessageCreate (GroupMessageCreateRequest) returns (GroupMessageCreateReply);
  rpc GroupMessageList (GroupMessageListRequest) returns (stream GroupMessageListReply);

  // GroupPubSubTopic uses pub sub to send volatile updates to other group members
  rpc GroupPubSubTopicInit (stream GroupPubSubTopicInitRequest) returns (GroupPubSubTopicInitReply);
  rpc GroupPubSubTopicSubscribe (GroupPubSubTopicSubscribeRequest) returns (stream GroupPubSubTopicSubscribeReply);
}

service GroupInvitationManager {
  rpc GroupInvitationAccept (GroupInvitationAcceptRequest) returns (GroupInvitationAcceptReply);
  rpc GroupInvitationCreate (GroupInvitationCreateRequest) returns (GroupInvitationCreateReply);
  rpc GroupInvitationDiscard (GroupInvitationDiscardRequest) returns (GroupInvitationDiscardReply);
  rpc GroupInvitationList (GroupInvitationListRequest) returns (stream GroupInvitationListReply);
}

message SigChainEntry {

}

message SigChain {
  repeated SigChainEntry entries = 1;
}

message Contact {
  enum ContactStatus {
    Unknown = 0;
    Myself = 1;
    Contact = 2;
    Trusted = 3;
    Blocked = 4;
    RequestIn = 5;
    RequestOut = 6;
  }

  // AccountID = sig_chain.entries[0].pub_key
  SigChain sig_chain = 1;
  bytes metadata = 2; // Display name, profile picture etc.
  bytes rendezvous_point_seed = 3;
  bytes shared_secret = 4;
  ContactStatus contact_status = 5;
}

message AccountConfig {
  bool rendezvous_point_enabled = 1;
}

message DeviceConfig {
  // ... net config
}

message Device {
  bytes device_pub_key = 1;
  bytes account_pub_key = 2;
}

message EventSubscribeRequest {}
message EventStream {}

// Account

message CurrentDeviceExportDataRequest {}
message CurrentDeviceExportDataReply {}

message AccountGetInformationRequest {}
message AccountGetInformationReply {
  // account information
}

message CurrentDeviceGetConfigurationRequest {}
message CurrentDeviceGetConfigurationReply {}

message AccountGetConfigurationRequest {}
message AccountGetConfigurationReply {}

message AccountLinkNewDeviceRequest {}
message AccountLinkNewDeviceReply {}


// Account Public Contact Request

message AccountDisableIncomingContactRequestRequest {}
message AccountDisableIncomingContactRequestReply {}

message AccountEnableIncomingContactRequestRequest {}
message AccountEnableIncomingContactRequestReply {}

message AccountResetIncomingContactRequestLinkRequest {}
message AccountResetIncomingContactRequestLinkReply {}


// Contact Request

message ContactRequestAcceptRequest {}
message ContactRequestAcceptReply {}

message ContactRequestDiscardRequest {}
message ContactRequestDiscardReply {}

message ContactRequestListIncomingRequest {};
message ContactRequestListIncomingReply {};

message ContactRequestListOutgoingRequest {};
message ContactRequestListOutgoingReply {};

message ContactRequestSendRequest {};
message ContactRequestSendReply {};


// Contact

message ContactGetRequest {}
message ContactGetReply {}

message StreamManagerRequestToContactRequest {}
message StreamManagerRequestToContactReply {}

message ContactRemoveRequest {}
message ContactRemoveReply {}

message ContactListRequest {};
message ContactListReply {};


// Device

message StreamManagerAcceptRequest {}
message StreamManagerAcceptReply {}


// Group

message GroupCreateRequest {};
message GroupCreateReply {};

message GroupGenerateInviteLinkRequest {};
message GroupGenerateInviteLinkReply {};

message GroupLeaveRequest {};
message GroupLeaveReply {};

message GroupListRequest {};
message GroupListReply {};


// Group Message

message GroupMessageCreateRequest {};
message GroupMessageCreateReply {};

message GroupMessageListRequest {};
message GroupMessageListReply {};


// Group Request

message GroupInvitationAcceptRequest {};
message GroupInvitationAcceptReply {};

message GroupInvitationCreateRequest {};
message GroupInvitationCreateReply {};

message GroupInvitationDiscardRequest {};
message GroupInvitationDiscardReply {};

message GroupInvitationListRequest {};
message GroupInvitationListReply {};

message GroupPubSubTopicInitRequest {};
message GroupPubSubTopicInitReply {};

message GroupBroadcastSendRequest {};
message GroupBroadcastSendReply {};

message GroupPubSubTopicSubscribeRequest {};
message GroupPubSubTopicSubscribeReply {};
