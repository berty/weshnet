syntax = "proto3";

package berty.protocol;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option go_package = "berty.tech/berty/go/pkg/bertyprotocol";

// ProtocolService is the top-level API to manage an instance of the Berty Protocol.
// Each Berty Protocol Instance is considered as a Berty device and is associated with a Berty user.
service ProtocolService {
  // InstanceExportData exports instance data
  rpc InstanceExportData (InstanceExportData.Request) returns (InstanceExportData.Reply);

  // InstanceGetConfiguration gets current configuration of this protocol instance
  rpc InstanceGetConfiguration (InstanceGetConfiguration.Request) returns (InstanceGetConfiguration.Reply);

  // GroupCreate initiates a new group and joins it
  rpc GroupCreate (GroupCreate.Request) returns (GroupCreate.Reply);

  // GroupJoin joins an existing group
  rpc GroupJoin (GroupJoin.Request) returns (GroupJoin.Reply);

  // GroupLeave leaves a group
  rpc GroupLeave (GroupLeave.Request) returns (GroupLeave.Reply);

  // GroupInvite generates an invitation to a group
  rpc GroupInvite (GroupInvite.Request) returns (GroupInvite.Reply);

  // DevicePair pairs a new device to the current account
  rpc DevicePair (DevicePair.Request) returns (DevicePair.Reply);

  // ContactRequestReference retrieves the necessary information to create a contact link
  rpc ContactRequestReference (ContactRequestReference.Request) returns (ContactRequestReference.Reply);

  // ContactRequestDisable disables incoming contact requests
  rpc ContactRequestDisable (ContactRequestDisable.Request) returns (ContactRequestDisable.Reply);

  // ContactRequestEnable enables incoming contact requests
  rpc ContactRequestEnable (ContactRequestEnable.Request) returns (ContactRequestEnable.Reply);

  // ContactRequestResetReference generates a new contact request reference
  rpc ContactRequestResetReference (ContactRequestResetLink.Request) returns (ContactRequestResetLink.Reply);

  // ContactRequestEnqueue enqueues a new contact request to be sent
  rpc ContactRequestEnqueue (ContactRequestEnqueue.Request) returns (ContactRequestEnqueue.Reply);

  // ContactRequestAccept accepts a contact request
  rpc ContactRequestAccept (ContactRequestAccept.Request) returns (ContactRequestAccept.Reply);

  // ContactRemove removes a contact
  rpc ContactRemove (ContactRemove.Request) returns (ContactRemove.Reply);

  // ContactBlock blocks a contact, stops advertising on its rendezvous point
  rpc ContactBlock (ContactBlock.Request) returns (ContactBlock.Reply);

  // ContactUnblock unblocks a contact, resumes advertising on its rendezvous point
  rpc ContactUnblock (ContactUnblock.Request) returns (ContactUnblock.Reply);

  // GroupSettingSetGroup sets a setting for a group
  rpc GroupSettingSetGroup (GroupSettingSetGroup.Request) returns (GroupSettingSetGroup.Reply);

  // GroupSettingSetGroup sets a setting for own group member
  rpc GroupSettingSetMember (GroupSettingSetMember.Request) returns (GroupSettingSetMember.Reply);

  // GroupMessageSend sends a message to the group
  rpc GroupMessageSend (GroupMessageSend.Request) returns (GroupMessageSend.Reply);

  // AppendAccountSpecificEvent adds an event to account event store
  rpc AccountAppendAppSpecificEvent (AccountAppendAppSpecificEvent.Request) returns (AccountAppendAppSpecificEvent.Reply);

  // AccountSubscribe subscribes to the account events
  rpc AccountSubscribe (AccountSubscribe.Request) returns (stream AccountSubscribe.Reply);

  // GroupSettingSubscribe subscribes to the setting events for a group
  rpc GroupSettingSubscribe (GroupSettingStoreSubscribe.Request) returns (stream GroupSettingStoreSubscribe.Reply);

  // GroupMessageSubscribe subscribes to the message events for a group
  rpc GroupMessageSubscribe (GroupMessageSubscribe.Request) returns (stream GroupMessageSubscribe.Reply);

  // GroupMemberSubscribe subscribes to the member events for a group
  rpc GroupMemberSubscribe (GroupMemberSubscribe.Request) returns (stream GroupMemberSubscribe.Reply);
}

enum AccountEventType {
  AccountEventType_Undefined = 0;
  AccountEventType_GroupJoined = 1;
  AccountEventType_GroupLeft = 2;
  AccountEventType_DevicePaired = 3;
  AccountEventType_ContactRequestDisabled = 4;
  AccountEventType_ContactRequestEnabled = 5;
  AccountEventType_ContactRequestReferenceReset = 6;
  // TODO: ⚠️ figure how to overcome issues with having requests sent and received by multiple devices simultaneously, secret definition should not conflict
  AccountEventType_ContactRequestEnqueued = 7;
  AccountEventType_ContactRequested = 8;
  AccountEventType_ContactAccepted = 9;
  AccountEventType_ContactRemoved = 10;
  // TODO: privacy-wise we will still announce our presence on our public rendezvous point but ignore contact requests from the blocked contact (performing the handshake but ignoring the request received), so they will still know that we are online, we should be clear in the UI of the implications of blocking someone
  AccountEventType_ContactBlocked = 11;
  AccountEventType_ContactUnblocked = 12;
  AccountEventType_AppSpecified = 13;
}

enum GroupSettingStoreSettingType {
  Unknown = 0;
  Group = 1;
  Member = 2;
}

message InstanceExportData {
  message Request {
  }
  message Reply {
    bytes exported_data = 1;
  }
}

message InstanceGetConfiguration {
  enum SettingState {
    Unknown = 0;
    Enabled = 1;
    Disabled = 2;
    Unavailable = 3;
  }
  message Request {
  }
  message Reply {
    string peer_id = 1 [(gogoproto.customname) = "PeerID"];
    repeated string listeners = 2;
    SettingState ble_enabled = 3;
    SettingState wifi_p2p_enabled = 4; // MultiPeerConnectivity for Darwin and Nearby for Android
    SettingState mdns_enabled = 5;
    SettingState relay_enabled = 6;
  }
}

message GroupSettingSetMember {
  message Request {
    bytes group_pub_key = 1;
    string key = 2;
    bytes value = 3;
  }
  message Reply {
  }
}

message GroupSettingSetGroup {
  message Request {
    bytes group_pub_key = 1;
    string key = 2;
    bytes value = 3;
  }
  message Reply {
  }
}

message GroupSettingStoreSubscribe {
  message Request {
    bytes group_pub_key = 1;
    bytes since = 2;
    bytes until = 3;
    bool go_backwards = 4;
  }
  message Reply {
    GroupSettingStoreEvent event = 1;
  }
}

message EventBase {
  bytes id = 1 [(gogoproto.customname) = "ID"];
  repeated bytes parent_ids = 2 [(gogoproto.customname) = "ParentIDs"];
}

message GroupStoreEvent {
  EventBase event_base = 1;
  bytes group_pub_key = 2;
  bytes group_member_pub_key = 3;
  bytes group_device_pub_key = 4;
  bytes account_pub_key = 5;
}

message GroupSettingStoreEvent {
  GroupStoreEvent group_store_event = 1;
  GroupSettingStoreSettingType setting_type = 2;
  string key = 3;
  bytes value = 4;
}

message GroupMessageSend {
  message Request {
    bytes group_pub_key = 1;
    bytes payload = 2;
  }
  message Reply {
  }
}

message AccountAppendAppSpecificEvent {
  message Request {
    bytes payload = 1;
  }
  message Reply {
  }
}

message GroupMessageSubscribe {
  message Request {
    bytes group_pub_key = 1;
    bytes since = 2;
    bytes until = 3;
    bool go_backwards = 4;
  }
  message Reply {
    GroupMessageStoreEvent event = 1;
  }
}

message GroupMessageStoreEvent {
  GroupStoreEvent group_store_event = 1;
  bytes payload = 2;
}


message GroupMemberSubscribe {
  message Request {
    bytes group_pub_key = 1;
    bytes since = 2;
    bytes until = 3;
    bool go_backwards = 4;
  }
  message Reply {
    GroupMemberStoreEvent event = 1;
  }
}

message GroupMemberStoreEvent {
  GroupStoreEvent group_store_event = 1;
}


message GroupCreate {
  message Request {
  }
  message Reply {
  }
}

message GroupJoin {
  message Request {
    bytes reference = 1;
    bytes meta = 2;
  }
  message Reply {
  }
}

message GroupLeave {
  message Request {
    bytes group_pub_key = 1;
  }
  message Reply {
  }
}

message GroupInvite {
  message Request {
    bytes group_pub_key = 1;
  }
  message Reply {
    bytes reference = 1;
  }
}

message DevicePair {
  message Request {
  }
  message Reply {
  }
}

message ContactRequestReference {
  message Request {
  }
  message Reply {
    bytes reference = 1;
  }
}

message ContactRequestDisable {
  message Request {
  }
  message Reply {
  }
}

message ContactRequestEnable {
  message Request {
  }
  message Reply {
  }
}

message ContactRequestResetLink {
  message Request {
  }
  message Reply {
    bytes reference = 1;
  }
}

message ContactRequestEnqueue {
  message Request {
    bytes reference = 1;
    bytes meta = 3;
  }
  message Reply {
  }
}

message ContactRequestAccept {
  message Request {
    bytes contact_pub_key = 1;
  }
  message Reply {
  }
}

message ContactRemove {
  message Request {
    bytes contact_pub_key = 1;
  }
  message Reply {
  }
}

message ContactBlock {
  message Request {
    bytes contact_pub_key = 1;
  }
  message Reply {
  }
}

message ContactUnblock {
  message Request {
    bytes contact_pub_key = 1;
  }
  message Reply {
  }
}

message AccountSubscribe {
  message Request {
    bytes since = 1;
    bytes until = 2;
    bool go_backwards = 3;
  }
  message Reply {
    AccountStoreEvent event = 1;
  }
}

message AccountStoreEvent {
  bytes subject_public_key_bytes = 1;
  bytes data = 2;
}
