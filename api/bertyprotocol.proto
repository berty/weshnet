syntax = "proto3";

package berty.protocol;

import "google/api/annotations.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "go-internal/protocolmodel.proto";
import "github.com/golang/protobuf/ptypes/timestamp/timestamp.proto";

option go_package = "berty.tech/go/pkg/bertyprotocol";

option (gogoproto.goproto_getters_all) = false;
option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.goproto_registration) = true;
option (gogoproto.populate_all) = true;
option (gogoproto.equal_all) = true;
option (gogoproto.testgen_all) = false; // should be set to false, because of loops in message dependencies

// Instance is the top-level API to manage an instance of the Berty Protocol.
// Each Berty Protocol Instance is considered as a Berty device and is associated with a Berty user.
service Instance {
  // InstanceExportData exports instance data
  rpc InstanceExportData (InstanceExportDataRequest) returns (InstanceExportDataReply) { option (google.api.http) = {post: "/instance/export-data"}; };

  // InstanceGetConfiguration gets current configuration of this protocol instance
  rpc InstanceGetConfiguration (InstanceGetConfigurationRequest) returns (InstanceGetConfigurationReply);


  //// AccountManager
  // An account is associated with a Berty user

  // AccountGetConfiguration get current account global configuration (shared between all devices linked to current account)
  rpc AccountGetConfiguration (AccountGetConfigurationRequest) returns (AccountGetConfigurationReply);

  // AccountGetInformation get current account global information (shared between all devices linked to current account)
  rpc AccountGetInformation (AccountGetInformationRequest) returns (AccountGetInformationReply);

  // AccountLinkNewDevice link a new device to this account
  rpc AccountLinkNewDevice (AccountLinkNewDeviceRequest) returns (AccountLinkNewDeviceReply);

  // AccountDisableIncomingContactRequest disable incoming contact request, under the hood, this will make you undiscoverable for new contact
  rpc AccountDisableIncomingContactRequest (AccountDisableIncomingContactRequestRequest) returns (AccountDisableIncomingContactRequestReply);

  // AccountEnableIncomingContactRequest enable incoming contact request
  rpc AccountEnableIncomingContactRequest (AccountEnableIncomingContactRequestRequest) returns (AccountEnableIncomingContactRequestReply);

  // AccountResetIncomingContactRequestLink invalidate the request link
  rpc AccountResetIncomingContactRequestLink (AccountResetIncomingContactRequestLinkRequest) returns (AccountResetIncomingContactRequestLinkReply);


  //// Event Manager
  // Event Stream is a channel on which all the events of the protocol are
  // published (contact request, new incoming message, etc...).

  // EventSubscribe listen for real time protocol events
  rpc EventSubscribe (EventSubscribeRequest) returns (stream EventStream);


  //// ContactRequestManager
  // Two accounts can be considered as contacts if a contact request from one has been accepted by the other and secrets
  // for further communication have been exchanged.

  // ContactRequestAccept accepts the given contact request, the requester signature is included so any of their device
  // can accept the contact request
  rpc ContactRequestAccept (ContactRequestAcceptRequest) returns (ContactRequestAcceptReply);

  // ContactRequestDiscard discards the given contact request
  rpc ContactRequestDiscard (ContactRequestDiscardRequest) returns (ContactRequestDiscardReply);

  // ContactRequestListIncoming lists incoming contact request sent to your account
  rpc ContactRequestListIncoming (ContactRequestListIncomingRequest) returns (stream ContactRequestListIncomingReply);

  // ContactRequestListIncoming lists pending contact request sent by your account
  rpc ContactRequestListOutgoing (ContactRequestListOutgoingRequest) returns (stream ContactRequestListOutgoingReply);

  // ContactRequestSend sends a contact request to the given contact
  rpc ContactRequestSend (ContactRequestSendRequest) returns (ContactRequestSendReply);


  //// Contact Manager

  // ContactGet gets contact's information
  rpc ContactGet (ContactGetRequest) returns (ContactGetReply);

  // ContactList lists contacts of this account
  rpc ContactList (ContactListRequest) returns (stream ContactListReply);

  // ContactList removes the given contact
  rpc ContactRemove (ContactRemoveRequest) returns (ContactRemoveReply);


  //// Stream Manager

  // StreamManagerRequestToContact requests a stream to a specific contact
  rpc StreamManagerRequestToContact (StreamManagerRequestToContactRequest) returns (StreamManagerRequestToContactReply);

  // StreamManagerAccept accepts a stream request, and create a stream with the
  // contact that sent you this request
  rpc StreamManagerAccept (stream StreamManagerAcceptRequest) returns (stream StreamManagerAcceptReply);


  //// Group Manager
  // A group is a common communication channel shared by a set of devices. It can be devices from different accounts. In
  // the context of the Berty messaging application, groups are used for all conversations between contacts, whether
  // they include two or more contacts.

  // GroupCreate initiate a group locally
  rpc GroupCreate (GroupCreateRequest) returns (GroupCreateReply);

  // GroupGenerateInviteLink generates an invitation link used to send the invitation to
  // the other group members
  rpc GroupGenerateInviteLink (GroupGenerateInviteLinkRequest) returns (GroupGenerateInviteLinkReply);

  // GroupLeave leaves a group
  rpc GroupLeave (GroupLeaveRequest) returns (GroupLeaveReply);

  // GroupList lists all group for this account
  rpc GroupList (GroupListRequest) returns (stream GroupListReply);


  /// Group Message Manager

  // GroupMessageCreate creates a new message for the group, and send the invitation to
  // the other group members.
  rpc GroupMessageCreate (GroupMessageCreateRequest) returns (GroupMessageCreateReply);

  // GroupMessageList lists messages from this group
  rpc GroupMessageList (GroupMessageListRequest) returns (stream GroupMessageListReply);

  // GroupTopicPublish return a stream used to publish volatile updates to other group members
  // on a specific topic
  rpc GroupTopicPublish (stream GroupTopicPublishRequest) returns (GroupTopicPublishReply);

  // GroupTopicSubscribe subscribes to a topic to receive volatile message from it
  rpc GroupTopicSubscribe (GroupTopicSubscribeRequest) returns (stream GroupTopicSubscribeReply);


  //// Group Invitation Manager
  // New members will receive a payload similar to the one received on group init. Existing members will receive the
  // list of the newly added members and the required secrets to open their messages.

  // GroupInvitationAccept accepts an invation to join a group
  rpc GroupInvitationAccept (GroupInvitationAcceptRequest) returns (GroupInvitationAcceptReply);

  // GroupInvitationCreate creates an invitation, that can be sent to join this group
  rpc GroupInvitationCreate (GroupInvitationCreateRequest) returns (GroupInvitationCreateReply);

  // GroupInvitationDiscard discards an invtation sent to you to join a group
  rpc GroupInvitationDiscard (GroupInvitationDiscardRequest) returns (GroupInvitationDiscardReply);

  // GroupInvitationList lists pending invitation to this group
  rpc GroupInvitationList (GroupInvitationListRequest) returns (stream GroupInvitationListReply);
}


// Instance Manager

message InstanceExportDataRequest {}
message InstanceExportDataReply {
  bytes exported_data = 1;
}

message InstanceGetConfigurationRequest {}
message InstanceGetConfigurationReply {
  string peer_id = 1 [(gogoproto.customname) = "PeerID"];
  repeated string listeners = 2;
  bool ble_enabled = 3;
  bool wifi_p2p_enabled = 4; // MultiPeerConnectivity for Darwin and Nearby for Android
  bool mdns_enabled = 5;
  bool relay_enabled = 6;
}


// AccountManager

message AccountGetConfigurationRequest {}
message AccountGetConfigurationReply {
  bool contact_requestable = 1;
  bytes default_pinning_service = 2;
  bytes metadata = 3;
}

message AccountGetInformationRequest {}
message AccountGetInformationReply {
  bytes account_pub_key = 1;
  repeated Device devices = 2;
}

message Device {
  bytes device_pub_key = 1;
  bytes parent_device_pub_key = 2; // Equal to account_pub_key for the first device
  google.protobuf.Timestamp linked_at = 3;
  bool ble_capable = 4;
  bool wifi_p2p_capable = 5;
  bool relay_capable = 6;
}

message Invitation {
  bytes inviter_member_pub_key = 1;
  bytes invitation_priv_key = 2;
  bytes invitation_pub_key_signature = 3; // Signed by inviter_member_priv_key

  uint32 group_version = 4;
  bytes group_id_pub_key = 5;
  bytes shared_secret = 6;
}

message AccountLinkNewDeviceRequest {}
message AccountLinkNewDeviceReply {
  Invitation invitation = 1;
}

message ContactRequestLink {
  bytes rendezvous_point_seed = 1;
  bytes contact_account_pub_key = 2;
  bytes metadata = 3;
}

message AccountDisableIncomingContactRequestRequest {}
message AccountDisableIncomingContactRequestReply {}

message AccountEnableIncomingContactRequestRequest {}
message AccountEnableIncomingContactRequestReply {
  ContactRequestLink contact_request_link = 1;
}

message AccountResetIncomingContactRequestLinkRequest {}
message AccountResetIncomingContactRequestLinkReply {
  ContactRequestLink contact_request_link = 1; // Reset rdv_point_seed and rotation_time_point
}


// EventManager

message EventSubscribeRequest {}
message EventStream {
  enum EventType {
    EventUnknown = 0;
    EventMessage = 1;
    EventContactRequest = 2;
    EventGroupInvitation = 3;
    EventBroadcastAvailable = 4;
  }

  message MessageEvent {
    bytes group_id = 1 [(gogoproto.customname) = "GroupID"];
    bytes member_id = 2 [(gogoproto.customname) = "MemberID"];
    bytes payload = 3;
  }

  message ContactRequestEvent {
    bytes contact_account_pub_key = 1;
    bytes metadata = 2;
  }

  message GroupInvitationEvent {
    bytes group_id = 1 [(gogoproto.customname) = "GroupID"];
    bytes inviter_pub_key = 2;
    bytes metadata = 3;
  }

  message BroadcastEvent {
    bytes group_id = 1 [(gogoproto.customname) = "GroupID"];
    bytes member_id = 2 [(gogoproto.customname) = "MemberID"];
    bytes topic_id = 3 [(gogoproto.customname) = "TopicID"];
  }

  EventType type = 1;
  bytes event_id = 2 [(gogoproto.customname) = "EventID"];

  MessageEvent message_event = 3;
  ContactRequestEvent contact_request_event = 4;
  GroupInvitationEvent group_invitation_event = 5;
  BroadcastEvent broadcast_event = 6;
}


// ContactRequestManager

message ContactRequestAcceptRequest {
  bytes contact_account_pub_key = 1;
}
message ContactRequestAcceptReply {}

message ContactRequestDiscardRequest {
  bytes contact_account_pub_key = 1;
}
message ContactRequestDiscardReply {}

message ContactRequestListIncomingRequest {};
message ContactRequestListIncomingReply { // streamed
  protocolmodel.Contact contact = 1;
}

message ContactRequestListOutgoingRequest {};
message ContactRequestListOutgoingReply { // streamed
  protocolmodel.Contact contact = 1;
}

message ContactRequestSendRequest {
  ContactRequestLink contact_request_link = 1;
}
message ContactRequestSendReply {}


// ContactManager

message ContactGetRequest {
  bytes contact_account_pub_key = 1;
}
message ContactGetReply {
  protocolmodel.Contact contact = 1;
}

message ContactRemoveRequest {
  bytes contact_account_pub_key = 1;
}
message ContactRemoveReply {}

message ContactListRequest {};
message ContactListReply { // streamed
  protocolmodel.Contact contact = 1;
};


// Stream

message StreamManagerRequestToContactRequest {}
message StreamManagerRequestToContactReply {}

message StreamManagerAcceptRequest {}
message StreamManagerAcceptReply {}


// Group

message GroupCreateRequest {
  repeated bytes contact_account_pub_key = 1; // Invitees
  bytes pinning_service = 2;
  bytes metadata = 3;
};
message GroupCreateReply {
  protocolmodel.GroupInfo group_info = 1;
};

message GroupGenerateInviteLinkRequest {
  bytes group_id = 1 [(gogoproto.customname) = "GroupID"];
};
message GroupGenerateInviteLinkReply {
  Invitation invitation = 1;
};

message GroupLeaveRequest {
  bytes group_id = 1 [(gogoproto.customname) = "GroupID"];
};
message GroupLeaveReply {};

message GroupListRequest {};
message GroupListReply { // streamed
  protocolmodel.GroupInfo group_info = 1;
};


// Group Message

message GroupMessageCreateRequest {
  bytes group_id = 1 [(gogoproto.customname) = "GroupID"];
  bytes payload = 2;
};
message GroupMessageCreateReply {};

message GroupMessageListRequest {
  bytes group_id = 1 [(gogoproto.customname) = "GroupID"];
  uint64 from_index = 2;
  uint64 to_index = 3;
};
message GroupMessageListReply { // streamed
  bytes message_id = 1 [(gogoproto.customname) = "MessageID"];
  bytes member_id = 2 [(gogoproto.customname) = "MemberID"];
  bytes payload = 3;
};


// Group PubSub

message GroupTopicPublishRequest { // streamed
  bytes group_id = 1 [(gogoproto.customname) = "GroupID"];
  bytes topic_id = 2 [(gogoproto.customname) = "TopicID"];
  bytes volatile_data = 3;
};
message GroupTopicPublishReply {};

message GroupTopicSubscribeRequest {
  bytes group_id = 1 [(gogoproto.customname) = "GroupID"];
  bytes topic_id = 2 [(gogoproto.customname) = "TopicID"];
};
message GroupTopicSubscribeReply { // streamed
  bytes volatile_data = 1;
};


// Group Invitation

message GroupInvitationAcceptRequest {
  bytes group_id = 1 [(gogoproto.customname) = "GroupID"];
};
message GroupInvitationAcceptReply {};

message GroupInvitationCreateRequest {
  bytes group_id = 1 [(gogoproto.customname) = "GroupID"];
  repeated bytes contact_account_pub_key = 2;
};
message GroupInvitationCreateReply {};

message GroupInvitationDiscardRequest {
  bytes group_id = 1 [(gogoproto.customname) = "GroupID"];
};
message GroupInvitationDiscardReply {};

message GroupInvitationListRequest {};
message GroupInvitationListReply { // streamed
  bytes inviter_account_pub_key = 1;
  protocolmodel.GroupInfo group_info = 2;
};
