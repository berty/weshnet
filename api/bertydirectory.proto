syntax = "proto3";

package berty.directory.v1;

import "gogoproto/gogo.proto";
import "protocoltypes.proto";

option go_package = "berty.tech/berty/go/pkg/directorytypes";
option (gogoproto.goproto_unkeyed_all) = false;
option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.goproto_sizecache_all) = false;

// DirectoryService
service DirectoryService {
  rpc Register(Register.Request) returns (Register.Reply);

  rpc Query(Query.Request) returns (stream Query.Reply);

  rpc Unregister(Unregister.Request) returns (Unregister.Reply);
}

message Register {
  message Request {
    bytes verified_credential = 1;
    int64 expiration_date = 2;
    int64 locked_until_date = 3;
    string profile_uri = 4 [(gogoproto.customname) = "ProfileURI"];
    bool overwrite_existing_record = 5;
    bytes unlock_key = 6;
  }
  message Reply {
    string directory_record_token = 1;
    string directory_identifier = 2;
    int64 expiration_date = 3;
  }
}

message Query {
  message Request {
    repeated string directory_identifiers = 1;
  }
  message Reply {
    string directory_identifier = 1;
    int64 expires_at = 2;
    string profile_uri = 3 [(gogoproto.customname) = "ProfileURI"];
    bytes verified_credential = 4;
  }
}

message Unregister {
  message Request {
    string directory_identifier = 1;
    string directory_record_token = 2;
    bytes unlock_sig = 3; // sig of directory_record_token using the unlock_key, when not known (ie. device lost) the user can either wait for the record to expire or register again and then unregister
  }
  message Reply {}
}

message Record {
  string directory_identifier = 1 [(gogoproto.moretags) = "gorm:\"index;primaryKey;autoIncrement:false\""];
  string directory_record_token = 2;
  int64 expires_at = 3;
  int64 locked_until = 4;
  string unlock_key = 5;
  string profile_uri = 6 [(gogoproto.customname) = "ProfileURI"];
  bytes verified_credential = 7;
}
