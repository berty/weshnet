syntax = "proto3";

package berty.messenger;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
//import "bertytypes.proto";

option go_package = "berty.tech/berty/go/pkg/bertymessenger";

// MessengerService is the top-level API that uses the Berty Protocol to implement the Berty Messenger specific logic.
// Today, most of the Berty Messenger logic is implemented directly in the application (see the /js folder of this repo).
service MessengerService {
  // InstanceShareableBertyID returns a Berty ID that can be shared as a string, QR code or deep link.
  rpc InstanceShareableBertyID(InstanceShareableBertyID.Request) returns (InstanceShareableBertyID.Reply);

  // DevShareInstanceBertyID shares your Berty ID on a dev channel.
  // TODO: remove for public.
  rpc DevShareInstanceBertyID(DevShareInstanceBertyID.Request) returns (DevShareInstanceBertyID.Reply);

  // ParseDeepLink parses a link in the form of berty://xxx or https://berty.tech/id# and returns a structure
  // that can be used to display information.
  // This action is read-only.
  rpc ParseDeepLink(ParseDeepLink.Request) returns (ParseDeepLink.Reply);

  // SendContactRequest takes the payload received from ParseDeepLink and send a contact request using the Berty Protocol.
  rpc SendContactRequest(SendContactRequest.Request) returns (SendContactRequest.Reply);

  rpc SystemInfo(SystemInfo.Request) returns (SystemInfo.Reply);
}

message InstanceShareableBertyID {
  message Request {
    // reset will regenerate a new link
    bool reset = 1;

    string display_name = 2;
  }
  message Reply {
    BertyID berty_id = 1 [(gogoproto.customname) = "BertyID"];
    string berty_id_payload = 2 [(gogoproto.customname) = "BertyIDPayload"];
    string deep_link = 3 [(gogoproto.customname) = "DeepLink"];
    string html_url = 4 [(gogoproto.customname) = "HTMLURL"];
  }
}

message DevShareInstanceBertyID {
  message Request {
    // reset will regenerate a new link
    bool reset = 1;

    string display_name = 2;
  }
  message Reply {}
}

message ParseDeepLink {
  message Request {
    string link = 1;
  }
  message Reply {
    Kind kind = 1;
    BertyID berty_id = 3 [(gogoproto.customname) = "BertyID"];
  }
  enum Kind {
    UnknownKind = 0;
    BertyID = 1;
  }
}

message SendContactRequest {
  message Request {
    BertyID berty_id = 1 [(gogoproto.customname) = "BertyID"];
    bytes metadata = 2;
    bytes own_metadata = 3;
  }
  message Reply {}
}

message BertyID {
  bytes public_rendezvous_seed = 1;
  bytes account_pk = 2 [(gogoproto.customname) = "AccountPK"];
  string display_name = 3;
}

enum AppMessageType {
  Undefined = 0;
  UserMessage = 1;
  UserReaction = 2;
  GroupInvitation = 3;
  SetGroupName = 4;
  Acknowledge = 5;
}

message AppMessageTyped {
  AppMessageType type = 1;
}

message UserMessageAttachment {
  AppMessageType type = 1;
  string uri = 2;
}

message PayloadUserMessage {
  AppMessageType type = 1;
  string body = 2;
  repeated UserMessageAttachment attachments = 3;
  int64 sent_date = 4 [(gogoproto.jsontag) = "sentDate"];
}

message PayloadUserReaction {
  AppMessageType type = 1;
  string emoji = 2;
}

message PayloadGroupInvitation {
  AppMessageType type = 1;
  string group_pk = 2 [(gogoproto.jsontag) = "groupPk"];
}

message PayloadSetGroupName {
  AppMessageType type = 1;
  string name = 2;
}

message PayloadAcknowledge {
  AppMessageType type = 1;
  string target = 2;
}

message SystemInfo {
  message Request {}
  message Reply {
    int64 started_at = 1;
    int64 num_cpu = 2 [(gogoproto.customname) = "NumCPU"];
    string go_version = 3;
    int64 num_goroutine = 4;
    string operating_system = 5;
    string host_name = 6;
    string arch = 7;
    string version = 8;
    string vcs_ref = 9;
    int64 build_time = 10;
  }
}
